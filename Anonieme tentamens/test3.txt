ADEL5471 	 ---Begin---------------------
Compiler Errors:
(19,18): error CS1501: No overload for method 'AddHalte' takes 1 arguments
(20,18): error CS1501: No overload for method 'AddHalte' takes 1 arguments
(21,18): error CS1501: No overload for method 'AddHalte' takes 1 arguments
(22,18): error CS1501: No overload for method 'AddHalte' takes 1 arguments
(23,18): error CS1501: No overload for method 'AddHalte' takes 1 arguments
(24,18): error CS1501: No overload for method 'AddHalte' takes 1 arguments
(57,31): error CS7036: There is no argument given that corresponds to the required formal parameter 'Naam' of 'QuestionAndTest.Halte.Halte(string, TimeSpan)'
##################

ADEL5471,CompileError,
public class Bus
    {
        public Bus(int busNr, Lijn lijn, DateTime vertrektijd, string voornaam, string achternaam)
        {

        }
       
        
            
        
    }
public class Lijn
    {
        private int lijn;
        
        public List<Halte> Haltes = new List<Halte>();

        public Lijn(int Lijn)
        {
            this.lijn = Lijn;
            
        }

        public void AddHalte()
        {
            Halte halte = new Halte();
            Haltes.Add(halte);
        }
        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            throw new NotImplementedException();
        }
        #endregion
    }
public class Halte
    {
        private string naam;
        private TimeSpan reisduur;

        public Halte(string Naam, TimeSpan Reisduur)
        {
            this.naam = Naam;
            this.reisduur = Reisduur;
        }

      

    }

NakijkTool.TestRapport 	 ---End---------------------

ALET4995 	 ---Begin---------------------
Compiler Errors:
(16,29): error CS1729: 'QuestionAndTest.Lijn' does not contain a constructor that takes 1 arguments
(17,27): error CS1729: 'QuestionAndTest.Bus' does not contain a constructor that takes 5 arguments
(19,31): error CS1729: 'QuestionAndTest.Halte' does not contain a constructor that takes 2 arguments
(19,18): error CS1061: 'QuestionAndTest.Lijn' does not contain a definition for 'AddHalte' and no extension method 'AddHalte' accepting a first argument of type 'QuestionAndTest.Lijn' could be found (are you missing a using directive or an assembly reference?)
(20,31): error CS1729: 'QuestionAndTest.Halte' does not contain a constructor that takes 2 arguments
(20,18): error CS1061: 'QuestionAndTest.Lijn' does not contain a definition for 'AddHalte' and no extension method 'AddHalte' accepting a first argument of type 'QuestionAndTest.Lijn' could be found (are you missing a using directive or an assembly reference?)
(21,31): error CS1729: 'QuestionAndTest.Halte' does not contain a constructor that takes 2 arguments
(21,18): error CS1061: 'QuestionAndTest.Lijn' does not contain a definition for 'AddHalte' and no extension method 'AddHalte' accepting a first argument of type 'QuestionAndTest.Lijn' could be found (are you missing a using directive or an assembly reference?)
(22,31): error CS1729: 'QuestionAndTest.Halte' does not contain a constructor that takes 2 arguments
(22,18): error CS1061: 'QuestionAndTest.Lijn' does not contain a definition for 'AddHalte' and no extension method 'AddHalte' accepting a first argument of type 'QuestionAndTest.Lijn' could be found (are you missing a using directive or an assembly reference?)
(23,31): error CS1729: 'QuestionAndTest.Halte' does not contain a constructor that takes 2 arguments
(23,18): error CS1061: 'QuestionAndTest.Lijn' does not contain a definition for 'AddHalte' and no extension method 'AddHalte' accepting a first argument of type 'QuestionAndTest.Lijn' could be found (are you missing a using directive or an assembly reference?)
(24,31): error CS1729: 'QuestionAndTest.Halte' does not contain a constructor that takes 2 arguments
(24,18): error CS1061: 'QuestionAndTest.Lijn' does not contain a definition for 'AddHalte' and no extension method 'AddHalte' accepting a first argument of type 'QuestionAndTest.Lijn' could be found (are you missing a using directive or an assembly reference?)
##################

ALET4995,CompileError,
public class Bus
    {
        private int BusNr = 0;
        private int AantalPas = 0;
        private DateTime VertrekTijd = DateTime.MinValue;
        private string BestuurderNaam = "";
    }
public class Lijn
    {
        private int LijnNr = 0;
        private List<string>Halte = new List<string>();

        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            throw new NotImplementedException();
        }
        #endregion
    }
public class Halte
    {
        private string Naam = "";
        private int Reisduur = 0;
    }

NakijkTool.TestRapport 	 ---End---------------------

ALYC1623 	 ---Begin---------------------
ALYC1623,Correct,
public class Bus
    {
        private string _voornaam;
        private string _achternaam;

        public int BusNr { get; set; }
        public int AantalPassagiers { get; set; }
        public Lijn RijdOpLijn { get; set; }
        public DateTime Vertrektijd { get; set; }
        public string BestuurderNaam { get; set; }

        public Bus(int busNr, Lijn lijn, DateTime vertrektijd, string voornaam, string achternaam)
        {
            BusNr = busNr;
            RijdOpLijn = lijn;
            Vertrektijd = vertrektijd;
            BestuurderNaam = voornaam + " " + achternaam;

            this._voornaam = voornaam;
            this._achternaam = achternaam;
        }

        public void StapIn()
        {
            // Verhoog het aantal passagiers
            AantalPassagiers += 1;
        }

        public void StapUit()
        {
            // Verlaag het aantal passagiers
            AantalPassagiers -= 1;
        }
    }
public class Lijn
    {
        public int LijnNr { get; set; }
        public List<Halte> Haltes = new List<Halte>();

        public Lijn(int lijnNr)
        {
            // Set lijnnummer
            LijnNr = lijnNr;
        }

        public void AddHalte(Halte halte)
        {
            // Halte toevoegen
            Haltes.Add(halte);
        }

        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            TimeSpan reistijd = TimeSpan.FromSeconds(0);
            
            foreach (var halte in Haltes) {
                reistijd += halte.Reisduur;
            }

            return reistijd;
        }
        #endregion
    }
public class Halte
    {
        public string Naam { get; set; }
        public TimeSpan Reisduur { get; set; }

        public Halte(string naam, TimeSpan reisduur)
        {
            Naam = naam;
            Reisduur = reisduur;
        }
    }

NakijkTool.TestRapport 	 ---End---------------------

ALYS6101 	 ---Begin---------------------
ALYS6101,Correct,
public class Bus
    {
        public int BusNr { get; private set; }
        public int AantalPassagiers { get; private set; }
        public Lijn RijdOpLijn { get; private set; }
        public DateTime Vertrektijd { get; private set; }
        public string BestuurderNaam => _voornaam + " " + _achternaam;
        private string _voornaam;
        private string _achternaam;
        public Bus(int BusNr, Lijn lijn, DateTime vertrektijd, string voornaam, string achternaam)
        {
            this.BusNr = BusNr;
            this.AantalPassagiers = 0;
            this.RijdOpLijn = lijn;
            this.Vertrektijd = vertrektijd;
            this._voornaam = voornaam;
            this._achternaam = achternaam;
        }
        public void StapIn()
        {
            AantalPassagiers++;
        }
        public void StapUit()
        {
            AantalPassagiers--;
        }
    }
public class Lijn
    {
        public int LijnNr { get; private set; }
        public List<Halte> Haltes { get; private set; }

        public Lijn(int lijnNr)
        {
            this.LijnNr = lijnNr;
            Haltes = new List<Halte>();
        }

        public void AddHalte(Halte halte)
        {
            Haltes.Add(halte);
        }
        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            TimeSpan t = TimeSpan.FromSeconds(0);
            foreach (Halte halte in Haltes)
            {
                t += halte.Reisduur;
            }

            return t;
        }
        #endregion
    }
public class Halte
    {
        public string Naam { get; private set; }
        public TimeSpan Reisduur { get; private set; }
        public Halte(string naam, TimeSpan reisduur)
        {
            this.Naam = naam;
            this.Reisduur = reisduur;
        }
    }

NakijkTool.TestRapport 	 ---End---------------------

AMAL2619 	 ---Begin---------------------
Compiler Errors:
(78,25): error CS0111: Type 'QuestionAndTest.Lijn' already defines a member called 'Reistijd' with the same parameter types
(26,38): error CS0121: The call is ambiguous between the following methods or properties: 'QuestionAndTest.Lijn.Reistijd()' and 'QuestionAndTest.Lijn.Reistijd()'
##################

AMAL2619,CompileError,
public class Bus
    {
        public int BusNr { get; set; }
        public int AantalPassagiers { get; set; }
        public Lijn RijdOpLijn { get; set; }
        public DateTime Vertrektijd {get; set;}
        public string Bestuurdernaam { get; }
        private string _voornaam;
        private string _achternaam;

        public Bus (int busNr,Lijn lijn,DateTime vertrektijd,string voornaam,string achternaam)
        {
            busNr = BusNr ;
            lijn = RijdOpLijn;
            vertrektijd = Vertrektijd;
            voornaam = _voornaam;
            achternaam = _achternaam;
        }
        public void StapIn()
        {

        }
        public void StapUit()
        {

        }
    }
public class Lijn
    {
        public int LijnNr { get; set; }
        public List<Halte> Haltes { get; set; }

        public Lijn(int lijnNr)
        {
            lijnNr = LijnNr;
        }
        public void AddHalte(Halte halte)
        {

        }
        public void Reistijd()
        {
            
        }
        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            throw new NotImplementedException();
        }
        #endregion
    }
public class Halte
    {
        public string Naam { get; }
        public TimeSpan Reisduur { get; set; }

        public Halte( string naam, TimeSpan reisduur)
        {
            naam = Naam;
            reisduur = Reisduur;
        }
    }

NakijkTool.TestRapport 	 ---End---------------------

AMY2745 	 ---Begin---------------------
AMY2745,Correct,
public class Bus
    {
        private string _voornaam;
        private string _achternaam;

        public int BusNr { get; set; }
        public int AantalPassagiers { get; set; }
        public Lijn RijdOpLijn { get; set; }
        public DateTime Vertrektijd { get; set; }
        public string BestuurderNaam
        {
            get { return _voornaam + " " + _achternaam; }
        }

        public Bus(int busNr, Lijn lijn, DateTime vertrektijd, string voornaam,string achternaam)
        {
            BusNr = busNr;
            RijdOpLijn = lijn;
            Vertrektijd = vertrektijd;
            _voornaam = voornaam;
            _achternaam = achternaam;
        }

        public void StapIn()
        {
            AantalPassagiers++;
        }

        public void StapUit()
        {
            AantalPassagiers--;
        }
    }
public class Lijn
    {
        public int LijnNr { get; set; }
        public List<Halte> Haltes { get; set; }

        public Lijn(int lijnNr)
        {
            LijnNr = lijnNr;
        }

        public void AddHalte(Halte halte)
        {
            if (Haltes == null)
            {
                Haltes = new List<Halte>();
            }
            Haltes.Add(halte);
        }

        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            TimeSpan result = TimeSpan.FromSeconds(0);

            foreach (Halte h in Haltes)
            {
                result += h.Reisduur;
            }
            return result;
        }
        #endregion
    }
public class Halte
    {
        public string Naam { get; set; }
        public TimeSpan Reisduur { get; set; }

        public Halte(string naam, TimeSpan reisduur)
        {
            Naam = naam;
            Reisduur = reisduur;
        }
    }

NakijkTool.TestRapport 	 ---End---------------------

ANAS9806 	 ---Begin---------------------
ANAS9806,Correct,
public class Bus
    {
        public int BusNr { get; set; }
        public int AantalPassagiers { get; set; }
        public Lijn RijdOpLijn { get; set; }
        public DateTime Vertrektijd { get; set; }
        public string BestuurderNaam { get; set; }
        private string voornaam;
        private string achternaam;

        public Bus(int busNr, Lijn lijn, DateTime vertrektijd, string voornaam, string achternaam)
        {
            BusNr = busNr;
            RijdOpLijn = lijn;
            Vertrektijd = vertrektijd;
            this.voornaam = voornaam;
            this.achternaam = achternaam;
            BestuurderNaam = this.voornaam + " " + achternaam;
        }

        public void StapIn()
        {
            AantalPassagiers += 1;
        }

        public void StapUit()
        {
            if(AantalPassagiers > 0)
            {
                AantalPassagiers -= 1;
            }
        }
    }
public class Lijn
    {
        public int LijnNr { get; set; }
        private List<Halte> haltes = new List<Halte>();
        public List<Halte> Haltes { get { return haltes; }  }

        public Lijn(int lijnNr)
        {
            LijnNr = lijnNr;
        }

        public void AddHalte(Halte halte)
        {
            Haltes.Add(halte);
        }

        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            TimeSpan reistijd = TimeSpan.Zero;
            foreach (Halte halte in Haltes)
            {
                reistijd += halte.Reisduur;
            }
            return reistijd;
        }
        #endregion
    }
public class Halte
    {
        public string Naam { get; set; }
        public TimeSpan Reisduur { get; set; }

        public Halte(string naam, TimeSpan reisduur)
        {
            Naam = naam;
            Reisduur = reisduur;
        }
    }

NakijkTool.TestRapport 	 ---End---------------------

BENE1792 	 ---Begin---------------------
Compiler Errors:
(26,38): error CS1955: Non-invocable member 'QuestionAndTest.Lijn.Reistijd' cannot be used like a method.
##################

BENE1792,CompileError,
public class Bus
    {
        // Hier staan de instantie variable van de Bus class
        private string _voornaam;
        private string _achternaam;

        // Hier staan de properties van de Bus class
        public int BusNR
        {
            set;
            get;
        }

        public int AantalPassagiers
        {
            set;
            get;
        }

        public Lijn RijdOpLijn
        {
            set;
            get;
        }

        public DateTime Vetrektijd
        {
            set;
            get;
        }

        public string BestuurNaam
        {
            set{
                _voornaam = _voornaam;
                _achternaam = _achternaam;
            }
            get { 
                return _voornaam + _achternaam;

            }
        }

        // Hier staat de constructor voor de Bus class
        public Bus(int busNr, Lijn lijn, DateTime vetrektijd, string voornaam, string achternaam)
        {
            this.BusNR = busNr;
            this.RijdOpLijn = lijn;
            this.Vetrektijd = vetrektijd;
            this._voornaam = voornaam;
            this._achternaam = achternaam;
        }

        // Hier staan de methodes voor de Bus class
        public void StapIn()
        {

        }

        public void StapUit()
        {

        }

    }
public class Lijn
    {
        // Hier staan de properties van de Lijn class
        public int LijnNr
        {
            set;
            get;
        }

        public List<Halte> Haltes
        {
            set;
            get;
        }

        // Hier staat de constructor voor de Lijn class
        public Lijn(int lijnr)
        {
            this.LijnNr = lijnr;
        }

        // Hier staan de methoden voor de Lijn class
        public void AddHalte(Halte halte)
        {
          
            Haltes.Add(halte);
        }
        
        public TimeSpan Reistijd
        {
            set;
            get;
        }

    }
public class Halte
    {

        // Hier komen de properties te staan voor de class Halte 
        public string Naam
        {
            set;
            get;
        }

        public TimeSpan Reisduur
        {
            set;
            get;
        }

        // Hier staat de constructor van de class Halte
        public Halte(string naam, TimeSpan reisduur)
        {
            this.Naam = naam;
            this.Reisduur = reisduur;
        }

    }

NakijkTool.TestRapport 	 ---End---------------------

BERN6422 	 ---Begin---------------------
BERN6422,Correct,
public class Bus
    {
        private int _busNr;
        private Lijn _rijdOpLijn;
        private DateTime _vertrekTijd;
        private string _voornaam;
        private string _achternaam;
        private int _aantalPassagiers;

        public int BusNr => _busNr;
        public Lijn RijdOpLijn => _rijdOpLijn;
        public DateTime Vertrektijd => _vertrekTijd;
        public string BestuurderNaam => _voornaam + " " + _achternaam;
        public int AantalPassagiers => _aantalPassagiers;

        public Bus(int busNr, Lijn lijn, DateTime vertrektijd, string voornaam, string achternaam)
        {
            _busNr = busNr;
            _rijdOpLijn = lijn;
            _vertrekTijd = vertrektijd;
            _voornaam = voornaam;
            _achternaam = achternaam;
        }

        public void StapIn()
        {
            _aantalPassagiers++;
        }

        public void StapUit()
        {
            _aantalPassagiers--;
        }
    }
public class Lijn
    {
        private int _lijnNr;
        private List<Halte> _haltes = new List<Halte>();

        public int LijnNr => _lijnNr;
        public List<Halte> Haltes => _haltes;

        public Lijn(int lijnNr)
        {
            _lijnNr = lijnNr;
        }

        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            TimeSpan count = TimeSpan.FromSeconds(0);
            foreach (Halte halte in _haltes)
            {
                count += halte.Reisduur;
            }
            return count;
        }
        #endregion

        public void AddHalte(Halte halte)
        {
            _haltes.Add(halte);
        }
    }
public class Halte
    {
        private string _naam;
        private TimeSpan _reisduur;

        public string Naam => _naam;
        public TimeSpan Reisduur => _reisduur;

        public Halte(string naam, TimeSpan reisduur)
        {
            _naam = naam;
            _reisduur = reisduur;
        }
    }

NakijkTool.TestRapport 	 ---End---------------------

BERN9648 	 ---Begin---------------------
BERN9648,Correct,
public class Bus
    {
        public int BusNr { get; }
        public int AantalPassagiers { get; private set; }
        public Lijn RijdOpLijn { get; }
        public DateTime Vertrektijd { get; }
        public string BestuurderNaam { get; }
        private string _voornaam;
        private string _achternaam;

        public Bus(int busNr, Lijn lijn, DateTime vertrekTijd, string voornaam, string achternaam)
        {
            BusNr = busNr;
            RijdOpLijn = lijn;
            Vertrektijd = vertrekTijd;
            _voornaam = voornaam;
            _achternaam = achternaam;
            BestuurderNaam = _voornaam + " " + _achternaam;
        }

        public void StapIn()
        {
            AantalPassagiers++;
        }
        public void StapUit()
        {
            AantalPassagiers--;
        }
    }
public class Lijn
    {
        public int LijnNr { get; }
        public List<Halte> Haltes { get; }

        public Lijn(int lijnNr)
        {
            LijnNr = lijnNr;
            Haltes = new List<Halte>();
        }

        public void AddHalte(Halte halte)
        {
            Haltes.Add(halte);
        }

        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            TimeSpan total = TimeSpan.FromSeconds(0);
            foreach(Halte halte in Haltes)
            {
                total += halte.Reisduur;
            }
            return total;
        }
        #endregion
    }
public class Halte
    {
        public string Naam { get; }
        public TimeSpan Reisduur { get; }

        public Halte(string naam, TimeSpan reisduur)
        {
            Naam = naam;
            Reisduur = reisduur;
        }
    }

NakijkTool.TestRapport 	 ---End---------------------

BOYD9800 	 ---Begin---------------------
BOYD9800,ExceptionDuringExecution,
Runtime exception: System.NotImplementedException: The method or operation is not implemented.
   at Tentamens.QuestionAndTest.Lijn.Reistijd()
   at Tentamens.QuestionAndTest.TestVraag3() Exception has been thrown by the target of an invocation.
public class Bus
    {
        private string _voornaam;
        private string _achternaam;

        public int BusNr { get; set; }
        public int AantalPassagiers { get { return AantalPassagiers; } set { AantalPassagiers = value; } }
        public Lijn RijdOpLijn { get; set;}
        public DateTime Vertrektijd { get; set;}
        public string BestuurderNaam { get; set; }

        public Bus(int busNr, Lijn lijn, DateTime vertrektijd, string voornaam, string achternaam)
        {
            this.BusNr = busNr;
            this.RijdOpLijn = lijn;
            this.Vertrektijd = vertrektijd;
            this._voornaam = voornaam;
            this._achternaam = achternaam;
        }

        public void StapIn()
        {

        }

        public void StapUit()
        {

        }
    }
public class Lijn
    {
        public int LijnNr { get; set; }
        public List<Halte> Haltes = new List<Halte>();

        public Lijn(int lijnNr)
        {
            this.LijnNr = lijnNr;
        }

        public void AddHalte(Halte halte)
        {

        }

        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            
            throw new NotImplementedException();
        }
        #endregion
    }
public class Halte
    {
        public string Naam { get; }
        public TimeSpan Reisduur { get; set; }

        public Halte(string naam, TimeSpan reisduur)
        {
            this.Naam = naam;
            this.Reisduur = reisduur;
        }
    }

NakijkTool.TestRapport 	 ---End---------------------

CAND6333 	 ---Begin---------------------
Compiler Errors:
(191,9): error CS1028: Unexpected preprocessor directive
(17,35): error CS1503: Argument 2: cannot convert from 'Tentamens.QuestionAndTest.Lijn' to 'Tentamens.QuestionAndTest.Bus.Lijn'
(432,42): error CS1503: Argument 1: cannot convert from 'System.Collections.Generic.List<Tentamens.QuestionAndTest.Halte>' to 'double'
(432,17): error CS0201: Only assignment, call, increment, decrement, and new object expressions can be used as a statement
(120,42): error CS1503: Argument 1: cannot convert from 'System.Collections.Generic.List<Tentamens.QuestionAndTest.Bus.Halte>' to 'double'
(120,17): error CS0201: Only assignment, call, increment, decrement, and new object expressions can be used as a statement
(245,20): error CS1061: 'QuestionAndTest.Bus.HalteStack[]' does not contain a definition for 'Push' and no extension method 'Push' accepting a first argument of type 'QuestionAndTest.Bus.HalteStack[]' could be found (are you missing a using directive or an assembly reference?)
##################

CAND6333,CompileError,
public class Bus
    {
        private string voornaam;
        private string achternaam;

        public int BusNr
        {
            get;
            set;
        }

        public int AantalPassagiers
        {
            get;
            set;
        }

        public Lijn RijdOpLijn
        {
            get;
            set;
        }

        public DateTime Vertrektijd
        {
            get;
            set;
        }

        public string BestuurderNaam
        {
            get;
            set;
            
        }

        public Bus(int busNr, Lijn lijn, DateTime vertrektijd, string voornaam, string achternaam)
        {
            this.BusNr = busNr;
            this.RijdOpLijn = lijn;
            this.Vertrektijd = vertrektijd;
            this.voornaam = voornaam;
            this.achternaam = achternaam;
        }

        public void StapIn()
        {

        }

        public void StapUit()
        {

        }

        public class Lijn
        {

            List<Halte> halte = new List<Halte>();


            public int LijnNr
            {
                get;
                set;
            }

            public List<Halte> Haltes
            {
                get { return halte; } 
                set { halte = value; }
            }

            public Lijn(int lijnNr)
            {
                this.LijnNr = lijnNr;
            }

            public void AddHalte(Halte halte)
            {
                Haltes.Add(halte);
            }

            //Vraag 3 Hier invullen!
            #region Vraag3
            public TimeSpan Reistijd()
            {
                TimeSpan t = TimeSpan.FromSeconds(0);
                t + TimeSpan.FromSeconds(halte);
                return t;
              
            }
            #endregion
        }

        public class Halte
        {
            public string Naam
            {
                get;
                set;
            }

            public TimeSpan Reisduur
            {
                get;
                set;
            }

            public Halte(string naam, TimeSpan reisduur)
            {
                this.Naam = naam;
                this.Reisduur = reisduur;
            }
        }

        public class TestCasesVraag2
        {
            [Test]
            public void TestVraag2()
            {

                DateTime vertrek = new DateTime(2016, 09, 12, 14, 26, 0);

                Lijn lijn = new Lijn(612);
                Bus bus = new Bus(10, lijn, vertrek, "Joris", "Lops");

                lijn.AddHalte(new Halte("Bushalte NHL Hogeschool", TimeSpan.Zero));
                lijn.AddHalte(new Halte("Bushalte Stenden Hogeschool", TimeSpan.FromMinutes(1)));
                lijn.AddHalte(new Halte("Bushalte Wissesdwinger", TimeSpan.FromMinutes(2)));
                lijn.AddHalte(new Halte("Bushalte Harmonie", TimeSpan.FromMinutes(3)));
                lijn.AddHalte(new Halte("Bushalte Zaailand", TimeSpan.FromMinutes(1)));
                lijn.AddHalte(new Halte("Bushalte Busstation", TimeSpan.FromMinutes(5)));


                Assert.AreEqual("Joris Lops", bus.BestuurderNaam);
                Assert.AreEqual(612, bus.RijdOpLijn.LijnNr);
                Assert.AreEqual("Bushalte Wissesdwinger", bus.RijdOpLijn.Haltes[2].Naam);
                Assert.AreEqual(TimeSpan.FromMinutes(2), bus.RijdOpLijn.Haltes[2].Reisduur);

                Assert.AreEqual(0, bus.AantalPassagiers);
                bus.StapIn();
                bus.StapIn();
                Assert.AreEqual(2, bus.AantalPassagiers);
                bus.StapUit();
                Assert.AreEqual(1, bus.AantalPassagiers);
                bus.StapUit();
                Assert.AreEqual(0, bus.AantalPassagiers);

                Assert.AreEqual(6, bus.RijdOpLijn.Haltes.Count);

                Assert.AreEqual(10, bus.BusNr);

                Assert.AreEqual(612, bus.RijdOpLijn.LijnNr);

                Assert.AreEqual(new DateTime(2016, 09, 12, 14, 26, 0), bus.Vertrektijd);

            }
        }
        #endregion

        #region Vraag3
        //Vraag 3, zie class Lijn in Vraag 2

        public class TestCasesVraag3
        {
            [Test]
            public void TestVraag3()
            {

                DateTime vertrek = new DateTime(2016, 09, 12, 14, 26, 0);

                Lijn lijn = new Lijn(612);
                Bus bus = new Bus(10, lijn, vertrek, "Joris", "Lops");

                lijn.AddHalte(new Halte("Bushalte NHL Hogeschool", TimeSpan.Zero));
                lijn.AddHalte(new Halte("Bushalte Stenden Hogeschool", TimeSpan.FromMinutes(1)));
                lijn.AddHalte(new Halte("Bushalte Wissesdwinger", TimeSpan.FromMinutes(2)));
                lijn.AddHalte(new Halte("Bushalte Harmonie", TimeSpan.FromMinutes(3)));
                lijn.AddHalte(new Halte("Bushalte Zaailand", TimeSpan.FromMinutes(1)));
                lijn.AddHalte(new Halte("Bushalte Busstation", TimeSpan.FromMinutes(5)));

                TimeSpan reistijd = lijn.Reistijd();
                Assert.AreEqual(TimeSpan.FromMinutes(12), reistijd);

                DateTime aankomst = vertrek + reistijd;
                Assert.AreEqual(new DateTime(2016, 09, 12, 14, 38, 0), aankomst);

            }
        }
        #endregion

        #region Vraag4
        public class HalteStack
        {
            HalteStack[] hs = new HalteStack[20];
            int top = -1;

            public bool IsEmpty
            {   
                get
                {
                    return top == -1;
                }
            }

            public HalteStack()
            {
                //Je mag de constructor ook leeg laten indien je deze niet nodig bent
            }

            public void Push(string halteNaam)
            {
                hs.Push(halteNaam);
            }

            public string Pop()
            {
                throw new NotImplementedException();
            }

            //Vraag 4b
            public string PrintHaltesReversed()
            {
                throw new NotImplementedException();
            }
        }

        public class TestCasesVraag4
        {
            [Test]
            public void Test_Vraag4A()
            {
                HalteStack hs = new HalteStack();
                Assert.AreEqual(true, hs.IsEmpty);
                hs.Push("Bushalte Zaailand");
                Assert.AreEqual(false, hs.IsEmpty);
                Assert.AreEqual("Bushalte Zaailand", hs.Pop());
                Assert.AreEqual(true, hs.IsEmpty);

                hs.Push("Bushalte Zaailand");
                hs.Push("Bushalte Harmonie");
                hs.Push("Bushalte Wissesdwinger");

                Assert.AreEqual(false, hs.IsEmpty);
                Assert.AreEqual("Bushalte Wissesdwinger", hs.Pop());

                Assert.AreEqual(false, hs.IsEmpty);
                Assert.AreEqual("Bushalte Harmonie", hs.Pop());

                Assert.AreEqual(false, hs.IsEmpty);
                Assert.AreEqual("Bushalte Zaailand", hs.Pop());
                Assert.AreEqual(true, hs.IsEmpty);
            }

            [Test]
            public void Test_Vraag4B()
            {
                HalteStack hs = new HalteStack();
                hs.Push("Bushalte Zaailand");
                hs.Push("Bushalte Harmonie");
                hs.Push("Bushalte Wissesdwinger");
                hs.Push("Bushalte Stenden Hogeschool");
                hs.Push("Bushalte NHL Hogeschool");

                string reversed = hs.PrintHaltesReversed();
                Assert.AreEqual("Bushalte NHL Hogeschool,Bushalte Stenden Hogeschool,Bushalte Wissesdwinger,Bushalte Harmonie,Bushalte Zaailand"
                    , reversed);
            }
        }
        #endregion

        #region Vraag5
        public class HalteLinked
        {
            public string Naam { get; }
            public TimeSpan Reisduur { get; set; }
            public HalteLinked Volgende { get; set; }

            public HalteLinked(string naam, TimeSpan reisduur)
            {
                Naam = naam;
                Reisduur = reisduur;
            }
        }

        public class LijnLinked
        {
            private HalteLinked top = null;
            public int LijnNr { get; set; }

            public LijnLinked(int lijnNr, HalteLinked halte)
            {
                LijnNr = lijnNr;
                top = halte;
            }

            //Vraag 5A
            public int Count
            {
                get
                {
                    int aantal = 0;
                    if(top != null)
                    {
                        aantal++;
                    }
                    return aantal;
        
                }
            }

            //Vraag 5B
            public TimeSpan Reistijd()
            {
                throw new NotImplementedException();
            }
        }

        public class TestCasesVraag5
        {
            [Test]
            public void Test_Vraag5A()
            {
                HalteLinked nhl = new HalteLinked("Bushalte NHL Hogeschool", TimeSpan.Zero);

                LijnLinked lijnLinked = new LijnLinked(12, nhl);
                Assert.AreEqual(1, lijnLinked.Count);

                HalteLinked stenden = new HalteLinked("Bushalte Stenden Hogeschool", TimeSpan.FromMinutes(1));
                nhl.Volgende = stenden;
                Assert.AreEqual(2, lijnLinked.Count);

                HalteLinked harmonie = new HalteLinked("Bushalte Harmonie", TimeSpan.FromMinutes(3));
                stenden.Volgende = harmonie;
                Assert.AreEqual(3, lijnLinked.Count);

                HalteLinked zaailand = new HalteLinked("Bushalte Zaailand", TimeSpan.FromMinutes(1));
                harmonie.Volgende = zaailand;
                Assert.AreEqual(4, lijnLinked.Count);

                HalteLinked busstation = new HalteLinked("Bushalte Busstation", TimeSpan.FromMinutes(5));
                zaailand.Volgende = busstation;
                Assert.AreEqual(5, lijnLinked.Count);
            }

            [Test]
            public void Test_Vraag5B()
            {
                HalteLinked nhl = new HalteLinked("Bushalte NHL Hogeschool", TimeSpan.Zero);
                HalteLinked stenden = new HalteLinked("Bushalte Stenden Hogeschool", TimeSpan.FromMinutes(1));
                HalteLinked harmonie = new HalteLinked("Bushalte Harmonie", TimeSpan.FromMinutes(3));
                HalteLinked zaailand = new HalteLinked("Bushalte Zaailand", TimeSpan.FromMinutes(1));
                HalteLinked busstation = new HalteLinked("Bushalte Busstation", TimeSpan.FromMinutes(5));

                nhl.Volgende = stenden;
                stenden.Volgende = harmonie;
                harmonie.Volgende = zaailand;
                zaailand.Volgende = busstation;

                LijnLinked lijnLinked = new LijnLinked(12, nhl);

                Assert.AreEqual(TimeSpan.FromMinutes(10), lijnLinked.Reistijd());
            }
        }
        #endregion
    }
public class Lijn
        {

            List<Halte> halte = new List<Halte>();


            public int LijnNr
            {
                get;
                set;
            }

            public List<Halte> Haltes
            {
                get { return halte; } 
                set { halte = value; }
            }

            public Lijn(int lijnNr)
            {
                this.LijnNr = lijnNr;
            }

            public void AddHalte(Halte halte)
            {
                Haltes.Add(halte);
            }

            //Vraag 3 Hier invullen!
            #region Vraag3
            public TimeSpan Reistijd()
            {
                TimeSpan t = TimeSpan.FromSeconds(0);
                t + TimeSpan.FromSeconds(halte);
                return t;
              
            }
            #endregion
        }
public class Halte
        {
            public string Naam
            {
                get;
                set;
            }

            public TimeSpan Reisduur
            {
                get;
                set;
            }

            public Halte(string naam, TimeSpan reisduur)
            {
                this.Naam = naam;
                this.Reisduur = reisduur;
            }
        }

NakijkTool.TestRapport 	 ---End---------------------

CARE4340 	 ---Begin---------------------
CARE4340,Correct,
public class Bus
    {
        private int _busNr;
        private int _aantalPassagiers;
        private Lijn _rijdOpLijn;
        private DateTime _vertrekTijd;
        private string _bestuurdersNaam;

        private string _voornaam;
        private string _achternaam;

        public int BusNr {
            get {
                return this._busNr;
            }
        }
        public int AantalPassagiers
        {
            get
            {
                return this._aantalPassagiers;
            }
        }
        public Lijn RijdOpLijn
        {
            get
            {
                return this._rijdOpLijn;
            }
        }
        public DateTime Vertrektijd {
            get
            {
                return this._vertrekTijd;
            }
        }
        public string BestuurderNaam
        {
            get
            {
                return this._voornaam + " " + this._achternaam;
            }
        }

        public Bus(int busNr, Lijn lijn, DateTime vertrektijd, string voornaam, string achternaam)
        {
            this._busNr = busNr;
            this._rijdOpLijn = lijn;
            this._vertrekTijd = vertrektijd;
            this._voornaam = voornaam;
            this._achternaam = achternaam;
        }

        public void StapIn()
        {
            this._aantalPassagiers++;
        }

        public void StapUit()
        {
            this._aantalPassagiers--;
        }
    }
public class Lijn
    {
        private int _lijnNr;
        private List<Halte> _haltes = new List<Halte>();

        public int LijnNr {
            get
            {
                return this._lijnNr;
            }
        }
        public List<Halte> Haltes {
            get
            {
                return this._haltes;
            }

        }
        
        public Lijn(int lijnNr)
        {
            this._lijnNr = lijnNr;
        }

        public void AddHalte(Halte halte)
        {
            this._haltes.Add(halte); 
        }

        public TimeSpan Reistijd()
        {
            TimeSpan _totalReistijd = TimeSpan.FromSeconds(0);
            
            foreach(Halte halte in _haltes)
            {
                _totalReistijd += halte.Reisduur;
            }

            return _totalReistijd;
        }
    }
public class Halte
    {
        private string _naam;
        private TimeSpan _reisduur;

        public string Naam
        {
            get
            {
                return this._naam;
            }
        }
        public TimeSpan Reisduur
        {
            get
            {
                return this._reisduur;
            }

        }

        public Halte(string naam, TimeSpan reisduur)
        {
            this._naam = naam;
            this._reisduur = reisduur;
        }
    }

NakijkTool.TestRapport 	 ---End---------------------

CARL7568 	 ---Begin---------------------
CARL7568,Correct,
public class Bus
    {
        private int busNr;
        private int aantalPassagiers;
        private Lijn rijdOpLijn;
        private DateTime vertrektijd;
        private string voornaam;
        private string achternaam;

        public int BusNr
        {
            get
            {
                return busNr;
            }
        }

        public int AantalPassagiers
        {
            get
            {
                return aantalPassagiers;
            }
        }

        public Lijn RijdOpLijn
        {
            get
            {
                return rijdOpLijn;
            }
        }

        public DateTime Vertrektijd
        {
            get
            {
                return vertrektijd;
            }
        }

        public string BestuurderNaam
        {
            get
            {
                return voornaam + " " + achternaam;
            }
        }

        public Bus(int busNr, Lijn lijn, DateTime vertrektijd, string voornaam, string achternaam)
        {
            this.busNr = busNr;
            this.rijdOpLijn = lijn;
            this.vertrektijd = vertrektijd;
            this.voornaam = voornaam;
            this.achternaam = achternaam;
        }

        public void StapIn()
        {
            aantalPassagiers++;
        }

        public void StapUit()
        {
            if(aantalPassagiers > 0)
            {
                aantalPassagiers--;
            }
        }
    }
public class Lijn
    {
        private int lijnNr;
        private List<Halte> haltes = new List<Halte>();

        public int LijnNr
        {
            get
            {
                return lijnNr;
            }
        }

        public List<Halte> Haltes
        {
            get
            {
                return haltes;
            }
        }

        public Lijn(int lijnNr)
        {
            this.lijnNr = lijnNr;
        }

        public void AddHalte(Halte halte)
        {
            haltes.Add(halte);
        }
        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            {
                TimeSpan tijd = TimeSpan.FromSeconds(0);
                foreach (var halte in Haltes)
                {
                    tijd = tijd + halte.Reisduur;
                }
                return tijd;
            }
        }
        #endregion
    }
public class Halte
    {
        private string naam;
        private TimeSpan reisduur;

        public string Naam
        {
            get
            {
                return naam;
            }
        }

        public TimeSpan Reisduur
        {
            get
            {
                return reisduur;
            }
        }

        public Halte(string naam, TimeSpan reisduur)
        {
            this.naam = naam;
            this.reisduur = reisduur;
        }
    }

NakijkTool.TestRapport 	 ---End---------------------

CEDR5803 	 ---Begin---------------------
CEDR5803,Correct,
public class Bus
    {
        private string _voornaam;
        private string _achternaam;
        public int BusNr { get; set; }
        public int AantalPassagiers { get; set; }
        public Lijn RijdOpLijn { get; set; }
        public DateTime Vertrektijd { get; set; }
        public string BestuurderNaam { get { return _voornaam + " " + _achternaam; } }
        public Bus(int busNr, Lijn lijn, DateTime vertrektijd, string voornaam, string achternaam)
        {
            BusNr = busNr;
            RijdOpLijn = lijn;
            Vertrektijd = vertrektijd;
            _voornaam = voornaam;
            _achternaam = achternaam;
        }
        public void StapIn()
        {
            //if (AantalPassagiers < 0)
            //    AantalPassagiers = 0;
            AantalPassagiers++;
        }
        public void StapUit()
        {
            //if (AantalPassagiers < 0)
             //   AantalPassagiers = 0;
            AantalPassagiers--;
        }
    }
public class Lijn
    {
        public int LijnNr { get; set; }
        public List<Halte> Haltes { get; set; }
        public Lijn(int lijnNr)
        {
            LijnNr = lijnNr;
            Haltes = new List<Halte>();
        }
        public void AddHalte(Halte halte)
        {
            Haltes.Add(halte);
        }
        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            TimeSpan temp = TimeSpan.FromSeconds(0);
            foreach (Halte h in Haltes)
            {
                temp += h.Reisduur;
            }
            return temp;
        }
        #endregion
    }
public class Halte
    {
        public string Naam { get; set; }
        public TimeSpan Reisduur { get; set; }
        public Halte(string naam, TimeSpan reisduur)
        {
            Naam = naam;
            Reisduur = reisduur;
        }
    }

NakijkTool.TestRapport 	 ---End---------------------

CRIS4658 	 ---Begin---------------------
CRIS4658,Correct,
public class Bus
    {
        private string _voornaam;
        private string _achternaam;

        public int BusNr { get; set; }
        public int AantalPassagiers { get; set; }
        public Lijn RijdOpLijn { get; set; }
        public DateTime Vertrektijd { get; set; }
        public string BestuurderNaam { get { return _voornaam + ' ' + _achternaam; } }

        public Bus(int busNr, Lijn lijn, DateTime vertrektijd, string voornaam, string achternaam)
        {
            this.BusNr = busNr;
            this.RijdOpLijn = lijn;
            this.Vertrektijd = vertrektijd;
            this._voornaam = voornaam;
            this._achternaam = achternaam;
        }

        public void StapIn()
        {
            AantalPassagiers++;
        }

        public void StapUit()
        {
            AantalPassagiers--;
        }
    }
public class Lijn
    {
        public int LijnNr { get; set; }
        public List<Halte> Haltes { get; set; }

        public Lijn(int lijnNr)
        {
            this.LijnNr = lijnNr;

            Haltes = new List<Halte>();
        }

        public void AddHalte(Halte halte)
        {
            Haltes.Add(halte);
        }

        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            TimeSpan result = TimeSpan.FromSeconds(0);

            foreach (var halte in Haltes)
            {
                result += halte.Reisduur;
            }

            return result;
        }
        #endregion
    }
public class Halte
    {
        public string Naam { get; set; }
        public TimeSpan Reisduur { get; set; }

        public Halte(string naam, TimeSpan reisduur)
        {
            this.Naam = naam;
            this.Reisduur = reisduur;
        } 
    }

NakijkTool.TestRapport 	 ---End---------------------

DAIN1774 	 ---Begin---------------------
DAIN1774,ExceptionDuringExecution,
Runtime exception: System.NullReferenceException: Object reference not set to an instance of an object.
   at Tentamens.QuestionAndTest.Lijn.Reistijd()
   at Tentamens.QuestionAndTest.TestVraag3() Exception has been thrown by the target of an invocation.
public class Bus
    {
        public int BusNr;
        public int AantalPassagiers;
        public Lijn RijdOpLijn;
        public DateTime Vertrektijd;
        public string BestuurderNaam;
        private string _voornaam;
        private string _achternaam;

        public Bus(int busNr, Lijn lijn, DateTime vertrektijd, string voornaam, string achternaam)
        {
            _voornaam = voornaam;
            _achternaam = achternaam;
            BestuurderNaam = voornaam + " " + achternaam;
            BusNr = busNr;
            RijdOpLijn = lijn;
        }
        public void StapIn()
        {
            AantalPassagiers++;
        }
        public void StapUit()
        {
            AantalPassagiers--;
        }         
    }
public class Lijn
    {
        public int LijnNr;
        public List<Halte> Haltes;
        
        

        public Lijn (int lijnNr) 
        {
             lijnNr = 612;
            LijnNr = lijnNr;
        }
        public void AddHalte (Halte halte)
        {
            
        //    Haltes.Add(halte);
           
        }
        //Vraag 3 Hier invullen!

        //Lijst heeft reistijd
        // reistijd berekend totale reistijd
        // gebruik reisduur van Halte
        #region Vraag3
        public TimeSpan Reistijd()
        {
            TimeSpan Tijd = TimeSpan.FromMinutes(0);
            //double TimeSpan.TotalMinutes;
            //while(Tijd != TimeSpan.Zero)
            //{

            //}
          //  TimeSpan Newtijd = Haltes.Sum<Halte>;
            for (int i = 0; i < Haltes.Count; i++)
            {
               // TimeSpan Tijd1 = Haltes[i].Reisduur.Minutes;
                
            }

            return Tijd;
        }
        #endregion
    }
public class Halte
    {
        public string Naam;
        public TimeSpan Reisduur;

        public Halte (string naam, TimeSpan reisduur)
        {
           
            Naam = naam;
            Reisduur = reisduur;
        }
    }

NakijkTool.TestRapport 	 ---End---------------------

DAMA6428 	 ---Begin---------------------
Compiler Errors:
(191,9): error CS1028: Unexpected preprocessor directive
(17,35): error CS1503: Argument 2: cannot convert from 'Tentamens.QuestionAndTest.Lijn' to 'Tentamens.QuestionAndTest.Bus.Lijn'
(432,42): error CS1503: Argument 1: cannot convert from 'System.Collections.Generic.List<Tentamens.QuestionAndTest.Halte>' to 'double'
(432,17): error CS0201: Only assignment, call, increment, decrement, and new object expressions can be used as a statement
(120,42): error CS1503: Argument 1: cannot convert from 'System.Collections.Generic.List<Tentamens.QuestionAndTest.Bus.Halte>' to 'double'
(120,17): error CS0201: Only assignment, call, increment, decrement, and new object expressions can be used as a statement
(245,20): error CS1061: 'QuestionAndTest.Bus.HalteStack[]' does not contain a definition for 'Push' and no extension method 'Push' accepting a first argument of type 'QuestionAndTest.Bus.HalteStack[]' could be found (are you missing a using directive or an assembly reference?)
##################

DAMA6428,CompileError,
public class Bus
    {
        private string voornaam;
        private string achternaam;

        public int BusNr
        {
            get;
            set;
        }

        public int AantalPassagiers
        {
            get;
            set;
        }

        public Lijn RijdOpLijn
        {
            get;
            set;
        }

        public DateTime Vertrektijd
        {
            get;
            set;
        }

        public string BestuurderNaam
        {
            get;
            set;
            
        }

        public Bus(int busNr, Lijn lijn, DateTime vertrektijd, string voornaam, string achternaam)
        {
            this.BusNr = busNr;
            this.RijdOpLijn = lijn;
            this.Vertrektijd = vertrektijd;
            this.voornaam = voornaam;
            this.achternaam = achternaam;
        }

        public void StapIn()
        {

        }

        public void StapUit()
        {

        }

        public class Lijn
        {

            List<Halte> halte = new List<Halte>();


            public int LijnNr
            {
                get;
                set;
            }

            public List<Halte> Haltes
            {
                get { return halte; } 
                set { halte = value; }
            }

            public Lijn(int lijnNr)
            {
                this.LijnNr = lijnNr;
            }

            public void AddHalte(Halte halte)
            {
                Haltes.Add(halte);
            }

            //Vraag 3 Hier invullen!
            #region Vraag3
            public TimeSpan Reistijd()
            {
                TimeSpan t = TimeSpan.FromSeconds(0);
                t + TimeSpan.FromSeconds(halte);
                return t;
              
            }
            #endregion
        }

        public class Halte
        {
            public string Naam
            {
                get;
                set;
            }

            public TimeSpan Reisduur
            {
                get;
                set;
            }

            public Halte(string naam, TimeSpan reisduur)
            {
                this.Naam = naam;
                this.Reisduur = reisduur;
            }
        }

        public class TestCasesVraag2
        {
            [Test]
            public void TestVraag2()
            {

                DateTime vertrek = new DateTime(2016, 09, 12, 14, 26, 0);

                Lijn lijn = new Lijn(612);
                Bus bus = new Bus(10, lijn, vertrek, "Joris", "Lops");

                lijn.AddHalte(new Halte("Bushalte NHL Hogeschool", TimeSpan.Zero));
                lijn.AddHalte(new Halte("Bushalte Stenden Hogeschool", TimeSpan.FromMinutes(1)));
                lijn.AddHalte(new Halte("Bushalte Wissesdwinger", TimeSpan.FromMinutes(2)));
                lijn.AddHalte(new Halte("Bushalte Harmonie", TimeSpan.FromMinutes(3)));
                lijn.AddHalte(new Halte("Bushalte Zaailand", TimeSpan.FromMinutes(1)));
                lijn.AddHalte(new Halte("Bushalte Busstation", TimeSpan.FromMinutes(5)));


                Assert.AreEqual("Joris Lops", bus.BestuurderNaam);
                Assert.AreEqual(612, bus.RijdOpLijn.LijnNr);
                Assert.AreEqual("Bushalte Wissesdwinger", bus.RijdOpLijn.Haltes[2].Naam);
                Assert.AreEqual(TimeSpan.FromMinutes(2), bus.RijdOpLijn.Haltes[2].Reisduur);

                Assert.AreEqual(0, bus.AantalPassagiers);
                bus.StapIn();
                bus.StapIn();
                Assert.AreEqual(2, bus.AantalPassagiers);
                bus.StapUit();
                Assert.AreEqual(1, bus.AantalPassagiers);
                bus.StapUit();
                Assert.AreEqual(0, bus.AantalPassagiers);

                Assert.AreEqual(6, bus.RijdOpLijn.Haltes.Count);

                Assert.AreEqual(10, bus.BusNr);

                Assert.AreEqual(612, bus.RijdOpLijn.LijnNr);

                Assert.AreEqual(new DateTime(2016, 09, 12, 14, 26, 0), bus.Vertrektijd);

            }
        }
        #endregion

        #region Vraag3
        //Vraag 3, zie class Lijn in Vraag 2

        public class TestCasesVraag3
        {
            [Test]
            public void TestVraag3()
            {

                DateTime vertrek = new DateTime(2016, 09, 12, 14, 26, 0);

                Lijn lijn = new Lijn(612);
                Bus bus = new Bus(10, lijn, vertrek, "Joris", "Lops");

                lijn.AddHalte(new Halte("Bushalte NHL Hogeschool", TimeSpan.Zero));
                lijn.AddHalte(new Halte("Bushalte Stenden Hogeschool", TimeSpan.FromMinutes(1)));
                lijn.AddHalte(new Halte("Bushalte Wissesdwinger", TimeSpan.FromMinutes(2)));
                lijn.AddHalte(new Halte("Bushalte Harmonie", TimeSpan.FromMinutes(3)));
                lijn.AddHalte(new Halte("Bushalte Zaailand", TimeSpan.FromMinutes(1)));
                lijn.AddHalte(new Halte("Bushalte Busstation", TimeSpan.FromMinutes(5)));

                TimeSpan reistijd = lijn.Reistijd();
                Assert.AreEqual(TimeSpan.FromMinutes(12), reistijd);

                DateTime aankomst = vertrek + reistijd;
                Assert.AreEqual(new DateTime(2016, 09, 12, 14, 38, 0), aankomst);

            }
        }
        #endregion

        #region Vraag4
        public class HalteStack
        {
            HalteStack[] hs = new HalteStack[20];
            int top = -1;

            public bool IsEmpty
            {   
                get
                {
                    return top == -1;
                }
            }

            public HalteStack()
            {
                //Je mag de constructor ook leeg laten indien je deze niet nodig bent
            }

            public void Push(string halteNaam)
            {
                hs.Push(halteNaam);
            }

            public string Pop()
            {
                throw new NotImplementedException();
            }

            //Vraag 4b
            public string PrintHaltesReversed()
            {
                throw new NotImplementedException();
            }
        }

        public class TestCasesVraag4
        {
            [Test]
            public void Test_Vraag4A()
            {
                HalteStack hs = new HalteStack();
                Assert.AreEqual(true, hs.IsEmpty);
                hs.Push("Bushalte Zaailand");
                Assert.AreEqual(false, hs.IsEmpty);
                Assert.AreEqual("Bushalte Zaailand", hs.Pop());
                Assert.AreEqual(true, hs.IsEmpty);

                hs.Push("Bushalte Zaailand");
                hs.Push("Bushalte Harmonie");
                hs.Push("Bushalte Wissesdwinger");

                Assert.AreEqual(false, hs.IsEmpty);
                Assert.AreEqual("Bushalte Wissesdwinger", hs.Pop());

                Assert.AreEqual(false, hs.IsEmpty);
                Assert.AreEqual("Bushalte Harmonie", hs.Pop());

                Assert.AreEqual(false, hs.IsEmpty);
                Assert.AreEqual("Bushalte Zaailand", hs.Pop());
                Assert.AreEqual(true, hs.IsEmpty);
            }

            [Test]
            public void Test_Vraag4B()
            {
                HalteStack hs = new HalteStack();
                hs.Push("Bushalte Zaailand");
                hs.Push("Bushalte Harmonie");
                hs.Push("Bushalte Wissesdwinger");
                hs.Push("Bushalte Stenden Hogeschool");
                hs.Push("Bushalte NHL Hogeschool");

                string reversed = hs.PrintHaltesReversed();
                Assert.AreEqual("Bushalte NHL Hogeschool,Bushalte Stenden Hogeschool,Bushalte Wissesdwinger,Bushalte Harmonie,Bushalte Zaailand"
                    , reversed);
            }
        }
        #endregion

        #region Vraag5
        public class HalteLinked
        {
            public string Naam { get; }
            public TimeSpan Reisduur { get; set; }
            public HalteLinked Volgende { get; set; }

            public HalteLinked(string naam, TimeSpan reisduur)
            {
                Naam = naam;
                Reisduur = reisduur;
            }
        }

        public class LijnLinked
        {
            private HalteLinked top = null;
            public int LijnNr { get; set; }

            public LijnLinked(int lijnNr, HalteLinked halte)
            {
                LijnNr = lijnNr;
                top = halte;
            }

            //Vraag 5A
            public int Count
            {
                get
                {
                    int aantal = 0;
                    if(top != null)
                    {
                        aantal++;
                    }
                    return aantal;
        
                }
            }

            //Vraag 5B
            public TimeSpan Reistijd()
            {
                throw new NotImplementedException();
            }
        }

        public class TestCasesVraag5
        {
            [Test]
            public void Test_Vraag5A()
            {
                HalteLinked nhl = new HalteLinked("Bushalte NHL Hogeschool", TimeSpan.Zero);

                LijnLinked lijnLinked = new LijnLinked(12, nhl);
                Assert.AreEqual(1, lijnLinked.Count);

                HalteLinked stenden = new HalteLinked("Bushalte Stenden Hogeschool", TimeSpan.FromMinutes(1));
                nhl.Volgende = stenden;
                Assert.AreEqual(2, lijnLinked.Count);

                HalteLinked harmonie = new HalteLinked("Bushalte Harmonie", TimeSpan.FromMinutes(3));
                stenden.Volgende = harmonie;
                Assert.AreEqual(3, lijnLinked.Count);

                HalteLinked zaailand = new HalteLinked("Bushalte Zaailand", TimeSpan.FromMinutes(1));
                harmonie.Volgende = zaailand;
                Assert.AreEqual(4, lijnLinked.Count);

                HalteLinked busstation = new HalteLinked("Bushalte Busstation", TimeSpan.FromMinutes(5));
                zaailand.Volgende = busstation;
                Assert.AreEqual(5, lijnLinked.Count);
            }

            [Test]
            public void Test_Vraag5B()
            {
                HalteLinked nhl = new HalteLinked("Bushalte NHL Hogeschool", TimeSpan.Zero);
                HalteLinked stenden = new HalteLinked("Bushalte Stenden Hogeschool", TimeSpan.FromMinutes(1));
                HalteLinked harmonie = new HalteLinked("Bushalte Harmonie", TimeSpan.FromMinutes(3));
                HalteLinked zaailand = new HalteLinked("Bushalte Zaailand", TimeSpan.FromMinutes(1));
                HalteLinked busstation = new HalteLinked("Bushalte Busstation", TimeSpan.FromMinutes(5));

                nhl.Volgende = stenden;
                stenden.Volgende = harmonie;
                harmonie.Volgende = zaailand;
                zaailand.Volgende = busstation;

                LijnLinked lijnLinked = new LijnLinked(12, nhl);

                Assert.AreEqual(TimeSpan.FromMinutes(10), lijnLinked.Reistijd());
            }
        }
        #endregion
    }
public class Lijn
        {

            List<Halte> halte = new List<Halte>();


            public int LijnNr
            {
                get;
                set;
            }

            public List<Halte> Haltes
            {
                get { return halte; } 
                set { halte = value; }
            }

            public Lijn(int lijnNr)
            {
                this.LijnNr = lijnNr;
            }

            public void AddHalte(Halte halte)
            {
                Haltes.Add(halte);
            }

            //Vraag 3 Hier invullen!
            #region Vraag3
            public TimeSpan Reistijd()
            {
                TimeSpan t = TimeSpan.FromSeconds(0);
                t + TimeSpan.FromSeconds(halte);
                return t;
              
            }
            #endregion
        }
public class Halte
        {
            public string Naam
            {
                get;
                set;
            }

            public TimeSpan Reisduur
            {
                get;
                set;
            }

            public Halte(string naam, TimeSpan reisduur)
            {
                this.Naam = naam;
                this.Reisduur = reisduur;
            }
        }

NakijkTool.TestRapport 	 ---End---------------------

DANI4127 	 ---Begin---------------------
DANI4127,ExceptionDuringExecution,
Runtime exception: NUnit.Framework.AssertionException:   Expected: 00:12:00
  But was:  00:00:00

   at NUnit.Framework.Assert.That[TActual](TActual actual, IResolveConstraint expression, String message, Object[] args)
   at NUnit.Framework.Assert.AreEqual(Object expected, Object actual)
   at Tentamens.QuestionAndTest.TestVraag3() Exception has been thrown by the target of an invocation.
public class Bus
    {
        private int _BusNr;
        private int _AantalPassagiers;
        private Lijn _RijdOpLijn;
        private DateTime _Vertrektijd;
        private string _BestuurderNaam;
        private string _voornaam;
        private string _achternaam;

        public int BusNr
        {
            get
            {
                return _BusNr;
            }
        }
        public int AantalPassagiers
        {
            get
            {
                return _AantalPassagiers;
            }
        }
        public Lijn RijdOpLijn
        {
            get
            {
                return _RijdOpLijn;
            }
        }
        public DateTime Vertrektijd
        {
            get
            {
                return _Vertrektijd;
            }
        }
        public string BestuurderNaam
        {
            get
            {
                return _BestuurderNaam;
            }
        }

        public Bus(int busNr, Lijn lijn, DateTime vertrektijd, string voornaam, string achternaam)
        {
            _BusNr = busNr;
            _RijdOpLijn = lijn;
            _Vertrektijd = vertrektijd;
            _voornaam = voornaam;
            _achternaam = achternaam;
            _BestuurderNaam = voornaam + " " + achternaam;
        }
        public void StapIn()
        {
            _AantalPassagiers++;
        }
        public void StapUit()
        {
            _AantalPassagiers--;
        }
    }
public class Lijn
    {
        private int _LijnNr;
        private List<Halte> _Haltes = new List<Halte>();

        public Lijn(int lijnNr)
        {
            _LijnNr = Convert.ToInt32(lijnNr);
        }
        public void AddHalte(Halte halte)
        {
            _Haltes.Add(halte);
        }

        public int LijnNr
        {
            get
            {
                return _LijnNr;
            }
        }

        public List<Halte> Haltes
        {
            get
            {
                return _Haltes;
            }
        }


        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            return Halte.Reisduur;
        }
        #endregion
    }
public class Halte
    {
        private static string _Naam;
        private static TimeSpan _Reisduur;

        public string Naam
        {
            get
            {
                return _Naam;
            }
            set
            {
                _Naam = value;
            }
        }

        public static TimeSpan Reisduur
        {
            get
            {
                return _Reisduur;
            }
            set
            {
                _Reisduur.Add(value);
            }
        }

        public Halte(string naam, TimeSpan reisduur)
        {
            Reisduur += reisduur;
            _Naam = naam;
        }
    }

NakijkTool.TestRapport 	 ---End---------------------

DANN7437 	 ---Begin---------------------
DANN7437,Correct,
public class Bus
    {

        public int BusNr;
        public int AantalPassagiers;
        public Lijn RijdOpLijn;
        public DateTime Vertrektijd;
        public string BestuurderNaam;

        private string _voornaam;
        private string _achternaam;
        //10, lijn, vertrek, "Joris", "Lops"
        public Bus(int busNr,Lijn lijn,DateTime vertrektijd,string voornaam,string achternaam)
        {
            this.BusNr = busNr;
            this.RijdOpLijn = lijn;
            this.Vertrektijd = vertrektijd;
            this._voornaam = voornaam;
            this._achternaam = achternaam;
        }
        public void StapIn()
        {
            AantalPassagiers++;
        }
        public void StapUit()
        {
            AantalPassagiers--;
        }
    }
public class Lijn
    {
        public int LijnNr;
        public List<Halte> Haltes = new List<Halte>();
        public Lijn (int lijnNr)
        {
            this.LijnNr = lijnNr;
        }
        public void AddHalte(Halte halte)
        {
            Haltes.Add(halte);
        }
        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            TimeSpan reistijd = TimeSpan.FromSeconds(0);
            foreach(Halte halte in Haltes)
            {
                reistijd += halte.Reisduur;
            }
            return reistijd;
        }
        #endregion
    }
public class Halte
    {
        public string Naam;
        public TimeSpan Reisduur;

        public Halte (string naam,TimeSpan reisduur)
        {
            this.Naam = naam;
            this.Reisduur = reisduur;
        }
    }

NakijkTool.TestRapport 	 ---End---------------------

DARC1947 	 ---Begin---------------------
DARC1947,Correct,
public class Bus
    {
        private int _busNr;
        private int _aantalPassagiers;
        private Lijn _rijdOpLijn;
        private DateTime _vertrektijd;
        private string _bestuurderNaam;
        private string _voornaam;
        private string _achternaam;

        public int BusNr { get { return _busNr; } }
        public int AantalPassagiers { get { return _aantalPassagiers; } }
        public Lijn RijdOpLijn { get { return _rijdOpLijn; } }
        public DateTime Vertrektijd { get { return _vertrektijd; } }
        public string BestuurderNaam { get { return _bestuurderNaam ; } }

        public Bus(int busNr, Lijn lijn, DateTime vertrektijd, string voornaam, string achternaam)
        {
            this._busNr = busNr;
            this._rijdOpLijn = lijn;
            this._vertrektijd = vertrektijd;
            this._voornaam = voornaam;
            this._achternaam = achternaam;
            this._bestuurderNaam = _voornaam + " " + _achternaam;
        }

        public void StapIn()
        {
            _aantalPassagiers++;
        }

        public void StapUit()
        {
            _aantalPassagiers--;
        }
    }
public class Lijn
    {
        private int _lijnNr;
        private List<Halte> _haltes;

        public int LijnNr { get { return _lijnNr; } }
        public List<Halte> Haltes { get { return _haltes; } }

        public Lijn(int lijnNr)
        {
            this._lijnNr = lijnNr;
            _haltes = new List<Halte>();
        }

        public void AddHalte(Halte halte)
        {
            _haltes.Add(halte);
        }

        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            TimeSpan t = TimeSpan.FromSeconds(0);

            foreach(Halte element in _haltes)
            {
                t += element.Reisduur;
            }

            return t;
        }
        #endregion
    }
public class Halte
    {
        private string _naam;
        private TimeSpan _reisduur;

        public string Naam { get { return _naam; } }
        public TimeSpan Reisduur { get { return _reisduur; } }

        public Halte(string naam, TimeSpan reisduur)
        {
            this._naam = naam;
            this._reisduur = reisduur;
        }
    }

NakijkTool.TestRapport 	 ---End---------------------

DARR4000 	 ---Begin---------------------
Compiler Errors:
(78,25): error CS0111: Type 'QuestionAndTest.Lijn' already defines a member called 'Reistijd' with the same parameter types
(26,38): error CS0121: The call is ambiguous between the following methods or properties: 'QuestionAndTest.Lijn.Reistijd()' and 'QuestionAndTest.Lijn.Reistijd()'
##################

DARR4000,CompileError,
public class Bus
    {
        public int BusNr { get; set; }
        public int AantalPassagiers { get; set; }
        public Lijn RijdOpLijn { get; set; }
        public DateTime Vertrektijd {get; set;}
        public string Bestuurdernaam { get; }
        private string _voornaam;
        private string _achternaam;

        public Bus (int busNr,Lijn lijn,DateTime vertrektijd,string voornaam,string achternaam)
        {
            busNr = BusNr ;
            lijn = RijdOpLijn;
            vertrektijd = Vertrektijd;
            voornaam = _voornaam;
            achternaam = _achternaam;
        }
        public void StapIn()
        {

        }
        public void StapUit()
        {

        }
    }
public class Lijn
    {
        public int LijnNr { get; set; }
        public List<Halte> Haltes { get; set; }

        public Lijn(int lijnNr)
        {
            lijnNr = LijnNr;
        }
        public void AddHalte(Halte halte)
        {

        }
        public void Reistijd()
        {
            
        }
        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            throw new NotImplementedException();
        }
        #endregion
    }
public class Halte
    {
        public string Naam { get; }
        public TimeSpan Reisduur { get; set; }

        public Halte( string naam, TimeSpan reisduur)
        {
            naam = Naam;
            reisduur = Reisduur;
        }
    }

NakijkTool.TestRapport 	 ---End---------------------

DEET1208 	 ---Begin---------------------
DEET1208,Correct,
public class Bus
    {
        public int BusNr { get; set; }
        public int AantalPassagiers { get; set; }
        public Lijn RijdOpLijn { get; set; }
        public DateTime Vertrektijd { get; set; }
        public string BestuurderNaam { get; set; }
        private string voornaam = "";
        private string achternaam = "";
        
        public Bus(int BusNr, Lijn lijn, DateTime vertrektijd, string voornaam, string achternaam)
        {
            this.BusNr = BusNr;
            this.RijdOpLijn = lijn;
            this.Vertrektijd = vertrektijd;
            this.voornaam = voornaam;
            this.achternaam = achternaam;
        }
        public void StapIn()
        {

        }
        public void StapUit()
        {

        }
        
    }
public class Lijn
    {
        public int LijnNr { get; set; }
        public List<Halte> Haltes { get; set; }

        public Lijn(int LijnNr)
        {
            this.LijnNr = LijnNr;
        }
        public void AddHalte(Halte halte)
        {
            
        }
        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            TimeSpan totaleReistijd = new TimeSpan();
            totaleReistijd = TimeSpan.FromMinutes(12);
            return totaleReistijd;
        }
        #endregion
    }
public class Halte
    {
        public string Naam { get; set; }
        public TimeSpan Reisduur { get; set; }

        public Halte(string naam, TimeSpan reisduur)
        {
            this.Naam = naam;
            this.Reisduur = reisduur;
        }
       
    }

NakijkTool.TestRapport 	 ---End---------------------

DENI6163 	 ---Begin---------------------
DENI6163,Correct,
public class Bus
    {
        private int _BusNr;
        private int _AantalPassagiers;
        private Lijn _RijdOpLijn;
        private DateTime _Vertrektijd;
        private string _BestuurderNaam;
        private string _voornaam;
        private string _achternaam;

        public int BusNr => _BusNr;
        public int AantalPassagiers => _AantalPassagiers;
        public Lijn RijdOpLijn => _RijdOpLijn;
        public DateTime Vertrektijd => _Vertrektijd;
        public string BestuurderNaam => _BestuurderNaam;  

        public Bus(int Busnr, Lijn Lijn, DateTime vertrektijd, string voornaam, string achternaam)
        {
            this._BusNr = Busnr;
            this._RijdOpLijn = Lijn;
            this._Vertrektijd = vertrektijd;
            this._BestuurderNaam = voornaam + " " + achternaam;
            this._voornaam = voornaam;
            this._achternaam = achternaam;
        }

        public void StapIn()
        {
            _AantalPassagiers++;
        }

        public void StapUit()
        {
            _AantalPassagiers--;
        }
            
    }
public class Lijn
    {
        private int _LijnNr;
        private List<Halte> _Haltes = new List<Halte>();

        public int LijnNr => _LijnNr;
        public List<Halte> Haltes => _Haltes;

        public Lijn(int LijnNr)
        {            
            this._LijnNr = LijnNr;
        }

        public void AddHalte(Halte halte)
        {
            _Haltes.Add(halte);
        }

        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            TimeSpan t = TimeSpan.FromSeconds(0);

            foreach (Halte halte in Haltes)
            {
                t += halte.Reisduur;
            }
   
            return t;
        }
        #endregion
    }
public class Halte
    {
        private string _Naam;
        private TimeSpan _Reisduur;

        public string Naam => _Naam;
        public TimeSpan Reisduur => _Reisduur;

        public Halte(string naam, TimeSpan Reisduur)
        {
            this._Naam = naam;
            this._Reisduur = Reisduur;
        }
    }

NakijkTool.TestRapport 	 ---End---------------------

DEWE5190 	 ---Begin---------------------
DEWE5190,Correct,
public class Bus
    {
        private string _voornaam;
        private string _achternaam;

        public int BusNr;
        public int AantalPassagiers;
        public Lijn RijdOpLijn;
        public DateTime Vertrektijd;
        public string BestuurderNaam
        {
            get { return _voornaam + " " + _achternaam; }
        }

        public Bus(int busNr, Lijn lijn, DateTime vertrektijd, string voornaam, string achternaam)
        {
            BusNr = busNr;
            RijdOpLijn = lijn;
            Vertrektijd = vertrektijd;
            _voornaam = voornaam;
            _achternaam = achternaam;
        }

        public void StapIn()
        {
            AantalPassagiers++;
        }

        public void StapUit()
        {
            AantalPassagiers--;
        }
    }
public class Lijn
    {
        public int LijnNr;
        public List<Halte> Haltes = new List<Halte>();

        public Lijn(int lijnNr)
        {
            LijnNr = lijnNr;
        }

        public void AddHalte(Halte halte)
        {
            Haltes.Add(halte);
        }



        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            TimeSpan result = TimeSpan.Zero;
            foreach (var halte in Haltes)
            {
                result = result.Add(halte.Reisduur);
            }

            return result;
        }
        #endregion
    }
public class Halte
    {
        public string Naam;
        public TimeSpan Reisduur;

        public Halte(string Naam, TimeSpan Reisduur)
        {
            this.Naam = Naam;
            this.Reisduur = Reisduur;
        }

    }

NakijkTool.TestRapport 	 ---End---------------------

DEXT4229 	 ---Begin---------------------
DEXT4229,Correct,
public class Bus
    {

        public int BusNr;
        public int AantalPassagiers;
        public Lijn RijdOpLijn;
        public DateTime Vertrektijd;
        public string BestuurderNaam;

        private string _voornaam;
        private string _achternaam;
        //10, lijn, vertrek, "Joris", "Lops"
        public Bus(int busNr,Lijn lijn,DateTime vertrektijd,string voornaam,string achternaam)
        {
            this.BusNr = busNr;
            this.RijdOpLijn = lijn;
            this.Vertrektijd = vertrektijd;
            this._voornaam = voornaam;
            this._achternaam = achternaam;
        }
        public void StapIn()
        {
            AantalPassagiers++;
        }
        public void StapUit()
        {
            AantalPassagiers--;
        }
    }
public class Lijn
    {
        public int LijnNr;
        public List<Halte> Haltes = new List<Halte>();
        public Lijn (int lijnNr)
        {
            this.LijnNr = lijnNr;
        }
        public void AddHalte(Halte halte)
        {
            Haltes.Add(halte);
        }
        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            TimeSpan reistijd = TimeSpan.FromSeconds(0);
            foreach(Halte halte in Haltes)
            {
                reistijd += halte.Reisduur;
            }
            return reistijd;
        }
        #endregion
    }
public class Halte
    {
        public string Naam;
        public TimeSpan Reisduur;

        public Halte (string naam,TimeSpan reisduur)
        {
            this.Naam = naam;
            this.Reisduur = reisduur;
        }
    }

NakijkTool.TestRapport 	 ---End---------------------

DIMP1403 	 ---Begin---------------------
DIMP1403,Correct,
public class Bus
    {
        private string _voornaam;
        private string _achternaam;

        public int BusNr { get;  }
        public int AantalPassagiers { get; set; }
        public Lijn RijdOpLijn { get; }
        public DateTime Vertrektijd { get; }
        public string BestuurderNaam
        {
            get
            {
                return _voornaam + " " + _achternaam;
            }
        }

        public Bus(int busNr, Lijn lijn, DateTime vertrektijd, string voornaam, string achternaam)
        {
            _voornaam = voornaam;
            _achternaam = achternaam;
            BusNr = busNr;
            RijdOpLijn = lijn;
            Vertrektijd = vertrektijd;
        }

        public void StapIn()
        {
            AantalPassagiers += 1;
        }

        public void StapUit()
        {
            AantalPassagiers -= 1;
        }
    }
public class Lijn
    {
        public int LijnNr { get; }
        public List<Halte> Haltes { get; set; }

        public Lijn(int lijnNr)
        {
            LijnNr = lijnNr;
        }

        public void AddHalte(Halte halte)
        {
            if(Haltes == null)
            {
                Haltes = new List<Halte>();
            }
            Haltes.Add(halte);
        }

        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            TimeSpan count = TimeSpan.FromMinutes(0);
            for(int i = 0; i < Haltes.Count; i++)
            {
                count += Haltes[i].Reisduur;
            }
            return count;
        }
        #endregion
    }
public class Halte
    {
        public string Naam { get; }
        public TimeSpan Reisduur { get; }

        public Halte(string naam, TimeSpan reisduur)
        {
            Naam = naam;
            Reisduur = reisduur;
        }
    }

NakijkTool.TestRapport 	 ---End---------------------

EDIE8635 	 ---Begin---------------------
EDIE8635,Correct,
public class Bus
    {
        private int busNr;
        private int aantalPassagiers;
        private Lijn rijdOpLijn;
        private DateTime vertrektijd;
        private string voornaam;
        private string achternaam;

        public int BusNr
        {
            get
            {
                return busNr;
            }
        }

        public int AantalPassagiers
        {
            get
            {
                return aantalPassagiers;
            }
        }

        public Lijn RijdOpLijn
        {
            get
            {
                return rijdOpLijn;
            }
        }

        public DateTime Vertrektijd
        {
            get
            {
                return vertrektijd;
            }
        }

        public string BestuurderNaam
        {
            get
            {
                return voornaam + " " + achternaam;
            }
        }

        public Bus(int busNr, Lijn lijn, DateTime vertrektijd, string voornaam, string achternaam)
        {
            this.busNr = busNr;
            this.rijdOpLijn = lijn;
            this.vertrektijd = vertrektijd;
            this.voornaam = voornaam;
            this.achternaam = achternaam;
        }

        public void StapIn()
        {
            aantalPassagiers++;
        }

        public void StapUit()
        {
            if(aantalPassagiers > 0)
            {
                aantalPassagiers--;
            }
        }
    }
public class Lijn
    {
        private int lijnNr;
        private List<Halte> haltes = new List<Halte>();

        public int LijnNr
        {
            get
            {
                return lijnNr;
            }
        }

        public List<Halte> Haltes
        {
            get
            {
                return haltes;
            }
        }

        public Lijn(int lijnNr)
        {
            this.lijnNr = lijnNr;
        }

        public void AddHalte(Halte halte)
        {
            haltes.Add(halte);
        }
        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            {
                TimeSpan tijd = TimeSpan.FromSeconds(0);
                foreach (var halte in Haltes)
                {
                    tijd = tijd + halte.Reisduur;
                }
                return tijd;
            }
        }
        #endregion
    }
public class Halte
    {
        private string naam;
        private TimeSpan reisduur;

        public string Naam
        {
            get
            {
                return naam;
            }
        }

        public TimeSpan Reisduur
        {
            get
            {
                return reisduur;
            }
        }

        public Halte(string naam, TimeSpan reisduur)
        {
            this.naam = naam;
            this.reisduur = reisduur;
        }
    }

NakijkTool.TestRapport 	 ---End---------------------

ELAN6969 	 ---Begin---------------------
ELAN6969,ExceptionDuringExecution,
Runtime exception: NUnit.Framework.AssertionException:   Expected: 00:12:00
  But was:  00:00:00

   at NUnit.Framework.Assert.That[TActual](TActual actual, IResolveConstraint expression, String message, Object[] args)
   at NUnit.Framework.Assert.AreEqual(Object expected, Object actual)
   at Tentamens.QuestionAndTest.TestVraag3() Exception has been thrown by the target of an invocation.
public class Bus
    {
        private int _BusNr;
        private int _AantalPassagiers;
        private Lijn _RijdOpLijn;
        private DateTime _Vertrektijd;
        private string _BestuurderNaam;
        private string _voornaam;
        private string _achternaam;

        public int BusNr
        {
            get
            {
                return _BusNr;
            }
        }
        public int AantalPassagiers
        {
            get
            {
                return _AantalPassagiers;
            }
        }
        public Lijn RijdOpLijn
        {
            get
            {
                return _RijdOpLijn;
            }
        }
        public DateTime Vertrektijd
        {
            get
            {
                return _Vertrektijd;
            }
        }
        public string BestuurderNaam
        {
            get
            {
                return _BestuurderNaam;
            }
        }

        public Bus(int busNr, Lijn lijn, DateTime vertrektijd, string voornaam, string achternaam)
        {
            _BusNr = busNr;
            _RijdOpLijn = lijn;
            _Vertrektijd = vertrektijd;
            _voornaam = voornaam;
            _achternaam = achternaam;
            _BestuurderNaam = voornaam + " " + achternaam;
        }
        public void StapIn()
        {
            _AantalPassagiers++;
        }
        public void StapUit()
        {
            _AantalPassagiers--;
        }
    }
public class Lijn
    {
        private int _LijnNr;
        private List<Halte> _Haltes = new List<Halte>();

        public Lijn(int lijnNr)
        {
            _LijnNr = Convert.ToInt32(lijnNr);
        }
        public void AddHalte(Halte halte)
        {
            _Haltes.Add(halte);
        }

        public int LijnNr
        {
            get
            {
                return _LijnNr;
            }
        }

        public List<Halte> Haltes
        {
            get
            {
                return _Haltes;
            }
        }


        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            return Halte.Reisduur;
        }
        #endregion
    }
public class Halte
    {
        private static string _Naam;
        private static TimeSpan _Reisduur;

        public string Naam
        {
            get
            {
                return _Naam;
            }
            set
            {
                _Naam = value;
            }
        }

        public static TimeSpan Reisduur
        {
            get
            {
                return _Reisduur;
            }
            set
            {
                _Reisduur.Add(value);
            }
        }

        public Halte(string naam, TimeSpan reisduur)
        {
            Reisduur += reisduur;
            _Naam = naam;
        }
    }

NakijkTool.TestRapport 	 ---End---------------------

ELIZ4497 	 ---Begin---------------------
Compiler Errors:
(292,39): error CS1001: Identifier expected
(301,39): error CS1001: Identifier expected
##################

ELIZ4497,CompileError,

NakijkTool.TestRapport 	 ---End---------------------

ESTE9689 	 ---Begin---------------------
ESTE9689,Correct,
public class Bus
    {
        private string _voornaam;
        private string _achternaam;
        public int BusNr { get; }
        public int AantalPassagiers { get; set; }
        public Lijn RijdOpLijn { get; set; }
        public DateTime Vertrektijd { get; set; }
        public double BestuurderNaam { get; set; }

        public Bus(int BusNr, Lijn lijn, DateTime vertrektijd, string voornaam, string achternaam)
        {
            
            this.BusNr = BusNr;
            this.RijdOpLijn = lijn;                      
            this.Vertrektijd = vertrektijd;
            this._voornaam = voornaam;
            this._achternaam = achternaam;                                    
        }

        public void StapIn()
        {

        }

        public void StapUit()
        {

        }
    }
public class Lijn
    {
        public int LijnNr { get; set; }
        public List<Halte> Haltes;
        

        public Lijn(int lijnNr)
        {
            this.LijnNr = lijnNr;
            this.Haltes = new List<Halte>();
        }

        public void AddHalte(Halte halte)
        {
            Haltes.Add(halte);
        }
        
        
        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            TimeSpan t = TimeSpan.FromMinutes(0);
            TimeSpan totmin = TimeSpan.FromMinutes(0);

            foreach (var haltegew in Haltes)
            {
                
                t = haltegew.Reisduur;
                totmin += t;
            }
            return totmin;
        }
        #endregion
    }
public class Halte
    {
        public string Naam { get; }
        public TimeSpan Reisduur { get; }

        public Halte(string naam, TimeSpan reisduur)
        {
            this.Naam = naam;
            this.Reisduur = reisduur;
        }
    }

NakijkTool.TestRapport 	 ---End---------------------

FLO9735 	 ---Begin---------------------
Compiler Errors:
(26,38): error CS1061: 'QuestionAndTest.Lijn' does not contain a definition for 'Reistijd' and no extension method 'Reistijd' accepting a first argument of type 'QuestionAndTest.Lijn' could be found (are you missing a using directive or an assembly reference?)
##################

FLO9735,CompileError,
public class Bus
    {
        private int busNr;
        private Lijn lijn;
        private DateTime vertrektijd;
        private int aantalPassagiers;
        private string _voornaam;
        private string _achternaam;


        public Bus(int busNr, Lijn lijn, DateTime vertrektijd, string voornaam, string achternaam)
        {
            this.busNr = busNr;
            this.lijn = lijn;
            this.vertrektijd = vertrektijd;
            _voornaam = voornaam;
            _achternaam = achternaam;
        }

        public int BusNr
        {
            get
            {
                return busNr;
            }
            set
            {
                busNr = value;
            }
        }
        public int AantalPassagiers
        {
            get
            {
                return aantalPassagiers;
            }
            set
            {
                aantalPassagiers = value;
            }
        }

        public Lijn RijdOpLijn
        {
            get
            {
                return lijn;
            }
            set
            {
                lijn = value;
            }
        }

        public DateTime Vertrektijd
        {
            get
            {
                return vertrektijd;
            }
            set
            {
                vertrektijd = value;
            }
        }


        public string BestuurderNaam
        {
            get
            {
                return _voornaam + " " + _achternaam;
            }
        }

        public void StapIn()
        {
            aantalPassagiers++;
        }

        public void StapUit()
        {
            aantalPassagiers--;
        }

    }
public class Lijn
    {
        private int lijnNr;
        private List<Halte> haltes = new List<Halte>();
        public Lijn(int lijnNr)
        {
            this.lijnNr = lijnNr;
        }

        public int LijnNr
        {
            get { return lijnNr; }
            set { lijnNr = value; }
        }

        public List<Halte> Haltes
        {
            get
            {
                return haltes;
            }
            set
            {
                haltes = value;
            }
        }
        public void AddHalte(Halte halte)
        {
            haltes.Add(halte);
        }

        public TimeSpan ReisTijd()
        {
            TimeSpan totaal = TimeSpan.Zero;

            foreach(Halte h in haltes)
            {
                totaal += h.Reisduur;
            }

            return totaal;
        }
    }
public class Halte
    {
        private string naam;
        private TimeSpan reisduur;

        public Halte(string naam, TimeSpan reisduur)
        {
            this.naam = naam;
            this.reisduur = reisduur;
        }

        public string Naam
        {
            get
            {
                return naam;
            }
            set
            {
                naam = value;
            }
        }

        public TimeSpan Reisduur
        {
            get
            {
                return reisduur;
            }
            set
            {
                reisduur = value;
            }
        }

    }

NakijkTool.TestRapport 	 ---End---------------------

FLOR2590 	 ---Begin---------------------
Compiler Errors:
(99,25): error CS0102: The type 'QuestionAndTest.Lijn' already contains a definition for 'Reistijd'
(16,29): error CS7036: There is no argument given that corresponds to the required formal parameter 'Haltes' of 'QuestionAndTest.Lijn.Lijn(int, string)'
(17,27): error CS7036: There is no argument given that corresponds to the required formal parameter 'Achternaam' of 'QuestionAndTest.Bus.Bus(int, QuestionAndTest.Lijn, DateTime, string, string, string)'
(19,18): error CS1955: Non-invocable member 'QuestionAndTest.Lijn.AddHalte' cannot be used like a method.
(20,18): error CS1955: Non-invocable member 'QuestionAndTest.Lijn.AddHalte' cannot be used like a method.
(21,18): error CS1955: Non-invocable member 'QuestionAndTest.Lijn.AddHalte' cannot be used like a method.
(22,18): error CS1955: Non-invocable member 'QuestionAndTest.Lijn.AddHalte' cannot be used like a method.
(23,18): error CS1955: Non-invocable member 'QuestionAndTest.Lijn.AddHalte' cannot be used like a method.
(24,18): error CS1955: Non-invocable member 'QuestionAndTest.Lijn.AddHalte' cannot be used like a method.
##################

FLOR2590,CompileError,
public class Bus
    {
        public int _BusNr { get; set; }
        public int AantalPassagiers { get; set; }
        public Lijn _RijdopLijn { get; set; }
        public DateTime _Vertrektijd { get; set; }
        public string _BestuurderNaam { get; set; }
        public string _Voornaam { get; set; }
        public string _Achternaam { get; set; }

        
        

        public Bus (int BusNr, Lijn lijn, DateTime Vertrektijd,string Bestuurdernaam,string Voornaam, string Achternaam)
        {
            _BusNr = BusNr;
            _RijdopLijn = lijn;
            _Vertrektijd = Vertrektijd;
            _BestuurderNaam = Bestuurdernaam;
            _Voornaam = Voornaam;
            _Achternaam = Achternaam;
        }
        

      
     

        


    }
public class Lijn
    {
        int _lijnNr { get; set; }
        TimeSpan Reistijd { get; set; }
        List<string> _Halte = new List<string>();
        


        public Lijn (int lijnNr, string Haltes)
        {
            _lijnNr = lijnNr;
           
           
        }

        public class AddHalte
        {
            string _Haltes { get; set; }
            public AddHalte(string Haltes )
            {
                _Haltes = Haltes;
            }

            
        }

       
        
        

        
       
        

        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            throw new NotImplementedException();
        }
        #endregion
       

       
        
        
    }
public class Halte
    {
        public string _Naam;
        public TimeSpan _Reisduur { get; set; }
        
        
        

        public Halte(string Naam, TimeSpan Reisduur)
        {
            _Naam = Naam;
            _Reisduur = Reisduur;
            TimeSpan H = TimeSpan.FromSeconds(0);

        }
        
        

    
    }

NakijkTool.TestRapport 	 ---End---------------------

GENE1812 	 ---Begin---------------------
GENE1812,Correct,
public class Bus
    {
        private string _voornaam;
        private string _achternaam;

        public int BusNr { get; private set; }
        public int AantalPassagiers { get; private set; }
        public Lijn RijdOpLijn { get; private set; }
        public DateTime Vertrektijd { get; private set; }
        public string BestuurderNaam { get { return _voornaam + " " + _achternaam; } }

        public Bus(int busNr, Lijn lijn, DateTime vertrektijd, string voornaam, string achternaam)
        {
            BusNr = busNr;
            RijdOpLijn = lijn;
            Vertrektijd = vertrektijd;
            _voornaam = voornaam;
            _achternaam = achternaam;
        }

        public void StapIn()
        {
            AantalPassagiers++;
        }

        public void StapUit()
        {
            AantalPassagiers--;
        }
    }
public class Lijn
    {
        public int LijnNr { get; private set; }
        public List<Halte> Haltes { get; private set; }

        public Lijn(int lijnNr)
        {
            LijnNr = lijnNr;
            Haltes = new List<Halte>();
        }

        public void AddHalte(Halte halte)
        {
            Haltes.Add(halte);
        }

        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            TimeSpan t = TimeSpan.FromSeconds(0);
            foreach (Halte h in Haltes)
                t += h.Reisduur;
            return t;
        }
        #endregion
    }
public class Halte
    {
        public string Naam { get; private set; }
        public TimeSpan Reisduur { get; private set; }

        public Halte(string naam, TimeSpan reisduur)
        {
            Naam = naam;
            Reisduur = reisduur;
        }
    }

NakijkTool.TestRapport 	 ---End---------------------

GORD9509 	 ---Begin---------------------
Compiler Errors:
(17,27): error CS1729: 'QuestionAndTest.Bus' does not contain a constructor that takes 5 arguments
##################

GORD9509,CompileError,
public class Bus
    {
        public int BusNr
        {
            get { return BusNr; }
            set { BusNr = value;  }

        }

        public int AantalPassagiers
        {
            get { return AantalPassagiers; }
            set { AantalPassagiers = value;  }
        }

        public Lijn RijdOpLijn
        {
            get { return RijdOpLijn; }
            set { RijdOpLijn = value; }
        }

        public DateTime Vertrektijd
        {
            get { return Vertrektijd; }
            set { Vertrektijd = value; }
        }

        public string BestuurderNaam
        {
            
            get { return BestuurderNaam; }
            set { BestuurderNaam = value;  }

        }

        private string _voornaam;
        private string _achternaam;

        public Bus (int busNr, DateTime vertrektijd, string voornaam, string achternaam)
        {
            this.BusNr = busNr;
            this.Vertrektijd = vertrektijd;
            this._voornaam = voornaam;
            this._achternaam = achternaam;
        }

        public void StapIn()
        {
            AantalPassagiers++;
        }

        public void StapUit()
        {
            AantalPassagiers = AantalPassagiers - 1;
        }
    }
public class Lijn
    {
        public int LijnNr
        {
            get { return LijnNr; }
            set { LijnNr = value; }
        }

        public List<Halte> Haltes
        {
            get { return Haltes; }
            set { Haltes = value; }
        }

        public Lijn (int lijnNr)
        {
            this.LijnNr = lijnNr;
        }

        public void AddHalte (Halte halte)
        {
            Haltes.Add(halte);
        }

        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            TimeSpan t = TimeSpan.FromSeconds(0);
            int Huidigehalte = 0;
            int AantalHaltes = Haltes.Count;
            double Reistijd = 0;

            while (Huidigehalte >= 0 && Huidigehalte < AantalHaltes)
            {
                Huidigehalte++;

                t.Add(t);
            }

            return t;
        }
        #endregion
    }
public class Halte
    {
        public string Naam
        {
            get { return Naam; }
            set { Naam = value; }
        }

        public TimeSpan Reisduur
        {
            get { return Reisduur; }
            set { Reisduur = value; }
        }

        public Halte (string naam, TimeSpan reisduur)
        {
            this.Naam = naam;
            this.Reisduur = reisduur;
        }
    }

NakijkTool.TestRapport 	 ---End---------------------

GROV5119 	 ---Begin---------------------
Compiler Errors:
(302,24): error CS1525: Invalid expression term 'for'
(302,24): error CS1002: ; expected
##################

GROV5119,CompileError,

NakijkTool.TestRapport 	 ---End---------------------

HARR8301 	 ---Begin---------------------
Compiler Errors:
(307,27): error CS1001: Identifier expected
(307,27): error CS0230: Type and identifier are both required in a foreach statement
(397,22): error CS1525: Invalid expression term '}'
(397,22): error CS1002: ; expected
##################

HARR8301,CompileError,

NakijkTool.TestRapport 	 ---End---------------------

HARV7941 	 ---Begin---------------------
HARV7941,Correct,
public class Bus
    {
        private string _voornaam;
        private string _achternaam;
        public int BusNr { get; set; }
        public int AantalPassagiers { get; set; }
        public Lijn RijdOpLijn { get; set; }
        public DateTime Vertrektijd { get; set; }
        public string BestuurderNaam { get; set; }

        public Bus(int busNr, Lijn lijn, DateTime vertrektijd, string voornaam, string achternaam)
        {
            this.BusNr = busNr;
            this.RijdOpLijn = lijn;
            this.Vertrektijd = vertrektijd;
            this._voornaam = voornaam;
            this._achternaam = achternaam;
            this.BestuurderNaam = _voornaam + " " + _achternaam;
        }

        public void StapIn()
        {
            AantalPassagiers = AantalPassagiers + 1;
        }

        public void StapUit()
        {
            AantalPassagiers = AantalPassagiers - 1;
        }
    }
public class Lijn
    {
        public int LijnNr { get; set; }
        public List<Halte> Haltes = new List<Halte>();

        public Lijn(int lijnNr)
        {
            this.LijnNr = lijnNr;
        }

        public void AddHalte(Halte halte)
        {
            this.Haltes.Add(halte);
        }

        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            TimeSpan reistijd = TimeSpan.Zero;
            foreach (Halte halte in Haltes)
            {
                reistijd = reistijd + halte.Reisduur;
            }
            return reistijd;
        }
        #endregion
    }
public class Halte
    {
        public string Naam { get; }
        public TimeSpan Reisduur { get; }

        public Halte(string naam, TimeSpan reisduur)
        {
            this.Naam = naam;
            this.Reisduur = reisduur;
        }

    }

NakijkTool.TestRapport 	 ---End---------------------

HEAT2141 	 ---Begin---------------------
HEAT2141,ExceptionDuringExecution,
Runtime exception: System.NullReferenceException: Object reference not set to an instance of an object.
   at Tentamens.QuestionAndTest.Lijn.AddHalte(Halte halte)
   at Tentamens.QuestionAndTest.TestVraag3() Exception has been thrown by the target of an invocation.
public class Bus
    {
        private string _voornaam;
        private string _achternaam;
        private int busNr;
        private Lijn lijn;
        private DateTime vertrektijd;
        private int aantalPassagiers;

        public int BusNr
        {
            get
            {
                return busNr;
            }
        }

        public int AantalPassagiers
        {
            get
            {
                return aantalPassagiers;
            }
            
        }

        public Lijn RijdOpLijn
        {
            get
            {
                return lijn;
            }

        }

        public DateTime Vertrektijd
        {
            get
            {
                return vertrektijd;
            }
            
        }

        public string BestuurderNaam
        {
            get
            {
                return _voornaam + " " + _achternaam;
                    
            }
            

        }

        public Bus (int busNr, Lijn lijn, DateTime vertrektijd, string voornaam, string achternaam)
        {
                   
            this._achternaam = achternaam;
            this._voornaam = voornaam;

        }

        public void StapIn()
        {
            aantalPassagiers++;
            
        }

        public void StapUit()
        {
            aantalPassagiers--;
        }
    }
public class Lijn
    {
        private int lijnNr;


        public int LijnNr
        {
            get
            {
                return lijnNr ;
            }

        }

        public List<Halte> Haltes
        {
            get;

        }

        public Lijn(int lijnNr)
        {
           
        }

        public void AddHalte(Halte halte)
        {
            Haltes.Add(halte);

        }

        

        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            TimeSpan t = TimeSpan.FromMinutes(0);
            foreach (var h in Haltes)
            {
               
            }

            return t;

        }
        #endregion
    }
public class Halte
    {
        private string naam;
        private TimeSpan reisduur;

        public string Naam
        {
            get
            {
                return naam;
            }

        }

        public TimeSpan Reisduur
        {
            get
            {
                return reisduur;
            }
        }

        public Halte(string naam, TimeSpan reisduur)
        {
            this.naam = naam;
            this.reisduur = reisduur;
            
        }

    }

NakijkTool.TestRapport 	 ---End---------------------

HERS2947 	 ---Begin---------------------
HERS2947,Correct,
public class Bus
    {
        private string voornaam;
        private string achternaam;
        private int aantalPassagiers;
        
        public string BestuurderNaam
        {
            get { return voornaam + " " + achternaam; }
        }

        public DateTime Vertrektijd { get; }

        public Lijn RijdOpLijn { get; }

        public int BusNr { get; }

        public int AantalPassagiers
        {
            get { return aantalPassagiers; }
        }

        public Bus(int busNr, Lijn lijn, DateTime vertrektijd, string voornaam, string achternaam)
        {
            BusNr = busNr;
            RijdOpLijn = lijn;
            Vertrektijd = vertrektijd;
            this.voornaam = voornaam;
            this.achternaam = achternaam;
        }

        public void StapIn()
        {
            aantalPassagiers++;
        }

        public void StapUit()
        {
            if(aantalPassagiers > 0)
            {
                aantalPassagiers--;
            }
        }
    }
public class Lijn
    {
        private List<Halte> haltes = new List<Halte>();

        public int LijnNr { get; }

        public List<Halte> Haltes
        {
            get { return haltes; }
        }

        public Lijn(int lijnNr)
        {
            LijnNr = lijnNr;
        }

        public void AddHalte(Halte halte)
        {
            haltes.Add(halte);
        }

        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            TimeSpan tijd = TimeSpan.FromSeconds(0);

            foreach (Halte halte in haltes)
            {
                tijd += halte.Reisduur;
            }

            return tijd;
        }
        #endregion
    }
public class Halte
    {
        public string Naam { get; }

        public TimeSpan Reisduur { get; }

        public Halte(string naam, TimeSpan reisduur)
        {
            Naam = naam;
            Reisduur = reisduur;
        }
    }

NakijkTool.TestRapport 	 ---End---------------------

HOLL9608 	 ---Begin---------------------
HOLL9608,Correct,
public class Bus
    {
        private string _voornaam;
        private string _achternaam;

        public int BusNr { get; set; }
        public int AantalPassagiers { get; set; }
        public Lijn RijdOpLijn { get; set; }
        public DateTime Vertrektijd { get; set; }
        public string BestuurderNaam { get { return _voornaam + " " + _achternaam; } }

        public Bus(int busNr, Lijn lijn, DateTime vertrektijd, string voornaam, string achternaam)
        {
            BusNr = busNr;
            RijdOpLijn = lijn;
            Vertrektijd = vertrektijd;
            _voornaam = voornaam;
            _achternaam = achternaam;
            AantalPassagiers = 0;
        }

        public void StapIn()
        {
            AantalPassagiers++;
        }

        public void StapUit()
        {
            AantalPassagiers--;
        }
    }
public class Lijn
    {
        public int LijnNr { get; set; }
        public List<Halte> Haltes { get; set; }

        public Lijn(int lijnNr)
        {
            LijnNr = lijnNr;
            Haltes = new List<Halte>();
        }

        public void AddHalte(Halte halte)
        {
            Haltes.Add(halte);
        }

        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            TimeSpan totalTime = TimeSpan.Zero;

            foreach(Halte h in Haltes)
            {
                totalTime += h.Reisduur;
            }

            return totalTime;
        }
        #endregion
    }
public class Halte
    {
        public string Naam { get; set; }
        public TimeSpan Reisduur { get; set; }

        public Halte(string naam, TimeSpan reisduur)
        {
            Naam = naam;
            Reisduur = reisduur;
        }
    }

NakijkTool.TestRapport 	 ---End---------------------

IDEL3311 	 ---Begin---------------------
IDEL3311,Correct,
public class Bus
    {
        //de _voornaam en _achternaam variabelen waren vrijwel compleet zinloos, dus ik heb de
        //BestuurderNaam property aangepast zodat deze de _voornaam en _achternaam gebruikt bij
        //het aanroepen. De manier hoe ik het eerst had heb ik als comments laten staan.

        private string _voornaam;
        private string _achternaam;

        public int BusNr { get; set; }
        public int AantalPassagiers { get; set; }
        public Lijn RijdOpLijn { get; set; }
        public DateTime Vertrektijd { get; set; }
        //public string BestuurderNaam { get; set; }
        public string BestuurderNaam
        {
            get
            {
                return _voornaam + " " + _achternaam;
            }
        }

        public Bus(int busNr, Lijn lijn, DateTime vertrektijd, string voornaam, string achternaam)
        {
            BusNr = busNr;
            RijdOpLijn = lijn;
            Vertrektijd = vertrektijd;
            _voornaam = voornaam;
            _achternaam = achternaam;
            //BestuurderNaam = _voornaam + " " + _achternaam;
        }

        public void StapIn()
        {
            AantalPassagiers += 1;
        }
        public void StapUit()
        {
            if (AantalPassagiers > 0)
            {
                AantalPassagiers -= 1;
            }
        }
    }
public class Lijn
    {
        private List<Halte> haltes = new List<Halte>();

        public int LijnNr { get; set; }
        public List<Halte> Haltes { get { return haltes; } }

        public Lijn(int lijnNr)
        {
            LijnNr = lijnNr;
        }

        public void AddHalte(Halte halte)
        {
            Haltes.Add(halte);
        }


        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            TimeSpan totalReistijd = TimeSpan.Zero;

            foreach (Halte h in haltes)
            {
                totalReistijd += h.Reisduur;
            }

            return totalReistijd;
        }
        #endregion
    }
public class Halte
    {
        public string Naam { get; set; }
        public TimeSpan Reisduur { get; set; }

        public Halte(string naam, TimeSpan reisduur)
        {
            Naam = naam;
            Reisduur = reisduur;
        }
    }

NakijkTool.TestRapport 	 ---End---------------------

JEAN5397 	 ---Begin---------------------
JEAN5397,ExceptionDuringExecution,
Runtime exception: System.NullReferenceException: Object reference not set to an instance of an object.
   at Tentamens.QuestionAndTest.Lijn.AddHalte(Halte halte)
   at Tentamens.QuestionAndTest.TestVraag3() Exception has been thrown by the target of an invocation.
public class Bus
    {
        public int BusNr { get; set; }
        public int AantalPassagiers { get; set; }
        public Lijn RijdOpLijn { get; }
        public DateTime Vertrektijd { get; set; }
        public string BestuurderNaam { get { return BestuurderNaam;  } set { BestuurderNaam = _voornaam + _achternaam; } }
        string _voornaam;
        string _achternaam;

        public Bus(int busNr, Lijn lijn, DateTime vertrektijd, string voornaam, string achternaam)
        {
            busNr = BusNr;
            lijn = RijdOpLijn;
            vertrektijd = Vertrektijd;
            achternaam = _achternaam;
            voornaam = _voornaam;

        }

        public void StapIn()
        {

        }

        public void StapUit()
        {

        }
    }
public class Lijn
    {
        public int LijnNr { get; }
        public List<Halte> Haltes { get; set; }

        public Lijn(int lijnNr)
        {
            lijnNr = LijnNr;
        }

        public void AddHalte(Halte halte)
        {
            Haltes.Add(halte);
        }


        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            throw new NotImplementedException();
        }
        #endregion
    }
public class Halte
    {
        public string Naam { get;  }
        public TimeSpan Reisduur { get; set; }

        public Halte (string naam, TimeSpan reisduur)
        {
            naam = Naam;
            reisduur = Reisduur;
        }
    }

NakijkTool.TestRapport 	 ---End---------------------

JENI3878 	 ---Begin---------------------
JENI3878,Correct,
public class Bus
    {
        private string _voorNaam;
        private string _achternaam;
        private int _busNr;
        private int _aantalPassagiers;
        private Lijn _rijdOpLijn;
        private DateTime _vertrekTijd;

        public int BusNr { get { return _busNr; } }
        public int AantalPassagiers { get { return _aantalPassagiers; } }
        public Lijn RijdOpLijn { get { return _rijdOpLijn; } }
        public DateTime Vertrektijd { get { return _vertrekTijd; } }
        public string BestuurderNaam{ get { return _voorNaam + " " + _achternaam; } }

        public Bus(int busNr, Lijn lijn, DateTime vertrektijd, string voornaam, string achternaam)
        {
            _busNr = busNr;
            _rijdOpLijn = lijn;
            _vertrekTijd = vertrektijd;
            _voorNaam = voornaam;
            _achternaam = achternaam;
            _aantalPassagiers = 0;
        }

        public void StapIn()
        {
            _aantalPassagiers++;
        }

        public void StapUit()
        {
            if (AantalPassagiers > 0)
                _aantalPassagiers--;
        }
    }
public class Lijn
    {
        private int _lijnNr;
        private List<Halte> _haltes = new List<Halte>();

        public int LijnNr { get { return _lijnNr; } }
        public List<Halte> Haltes { get { return _haltes; } }

        public Lijn(int lijnNr)
        {
            _lijnNr = lijnNr;
        }

        public void AddHalte(Halte halte)
        {
            _haltes.Add(halte);
        }

        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            TimeSpan t = TimeSpan.FromSeconds(0);

            for (int i = 0; i < Haltes.Count; i++)
            {
                t += Haltes[i].Reisduur;
            }

            return t;
        }
        #endregion
    }
public class Halte
    {
        private string _naam;
        private TimeSpan _reisduur;

        public string Naam { get { return _naam; } }
        public TimeSpan Reisduur { get { return _reisduur; } }

        public Halte(string naam, TimeSpan reisduur)
        {
            _naam = naam;
            _reisduur = reisduur;
        }
    }

NakijkTool.TestRapport 	 ---End---------------------

JI3271 	 ---Begin---------------------
Compiler Errors:
(83,33): error CS1061: 'List<QuestionAndTest.Halte>' does not contain a definition for 'Sum' and no extension method 'Sum' accepting a first argument of type 'List<QuestionAndTest.Halte>' could be found (are you missing a using directive or an assembly reference?)
##################

JI3271,CompileError,
public class Bus
    {
        public int BusNr { get; protected set; }
        public int AantalPassagiers { get; protected set; }
        public Lijn RijdOpLijn;
        public DateTime Vertrektijd;
        // Je kan ook public maken, en dan een protected set modifier voor de property
        // (tenzij je de bestuurder aanpasbaar wilt stellen)
        private string _voornaam;
        private string _achternaam;
        public string BestuurderNaam { get; protected set; }

        public Bus(int busNr, Lijn lijn, DateTime vertrektijd, string voornaam, string achternaam)
        {
            this.BusNr = busNr;
            this.AantalPassagiers = 0;
            this.RijdOpLijn = lijn;
            this.Vertrektijd = vertrektijd;
            this._voornaam = voornaam;
            this._achternaam = achternaam;
            this.BestuurderNaam = $"{voornaam} {achternaam}";
        }

        // Even wat C#6 actie
        // -- en ++ is slomer (scheelt bijna niks in zulke gevallen, maar op grote schaal wel)
        public void StapIn()
            => AantalPassagiers += 1;
        public void StapUit()
            => AantalPassagiers -= 1;
    }
public class Lijn
    {
        public int LijnNr;
        public List<Halte> Haltes;

        public Lijn(int lijnNr)
        {
            this.LijnNr = lijnNr;
            this.Haltes = new List<Halte>();
        }

        public void AddHalte(Halte halte)
        {
            if (!Haltes.Contains(halte))
                Haltes.Add(halte);
        }

        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            long total = Haltes.Sum(halte => halte.Reisduur.Ticks);
            return new TimeSpan(total);
        }
        #endregion
    }
public class Halte
    {
        public string Naam;
        public TimeSpan Reisduur;

        public Halte(string naam, TimeSpan reisduur)
        {
            this.Naam = naam;
            this.Reisduur = reisduur;
        }
    }

NakijkTool.TestRapport 	 ---End---------------------

JONI5678 	 ---Begin---------------------
JONI5678,Correct,
public class Bus
    {
        private string _voornaam;
        private string _achternaam;

        public int BusNr { get; set; }
        public int AantalPassagiers { get; set; }
        public Lijn RijdOpLijn { get; set; }
        public DateTime Vertrektijd { get; set; }
        public string BestuurderNaam
        {
            get { return _voornaam + " " + _achternaam; }
        }

        public Bus(int busnr, Lijn lijn, DateTime vertrektijd, string voornaam, string achternaam)
        {
            BusNr = busnr;
            RijdOpLijn = lijn;
            Vertrektijd = vertrektijd;
            _voornaam = voornaam;
            _achternaam = achternaam;
        }

        public void StapIn()
        {
            AantalPassagiers++;
        }

        public void StapUit()
        {
            AantalPassagiers--;
        }
    }
public class Lijn
    {
        public int LijnNr { get; set; }
        public List<Halte> Haltes = new List<Halte>();

        public Lijn(int lijnNr)
        {
            LijnNr = lijnNr;
        }

        public void AddHalte(Halte halte)
        {
            Haltes.Add(halte);
        }

        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            TimeSpan t = TimeSpan.FromSeconds(0);
            foreach(var item in Haltes)
            {
                t += item.Reisduur;
            }
            return t;
        }
        #endregion
    }
public class Halte
    {
        public string Naam { get; set; }
        public TimeSpan Reisduur { get; set; }

        public Halte(string naam, TimeSpan reisduur)
        {
            Naam = naam;
            Reisduur = reisduur;
        }
    }

NakijkTool.TestRapport 	 ---End---------------------

JOSL1600 	 ---Begin---------------------
JOSL1600,Correct,
public class Bus
    {
        private string _voornaam;
        private string _achternaam;

        public int BusNr { get; set; }
        public int AantalPassagiers { get; set; }
        public Lijn RijdOpLijn { get; set; }
        public DateTime Vertrektijd { get; set; }
        public string BestuurderNaam
        {
            get
            {
                return $"{_voornaam} {_achternaam}";
            }
        }

        public Bus(int busNr, Lijn lijn, DateTime vertrektijd, string voornaam, string achternaam)
        {
            BusNr = busNr;
            AantalPassagiers = 0;
            RijdOpLijn = lijn;
            Vertrektijd = vertrektijd;
            _voornaam = voornaam;
            _achternaam = achternaam;
        }

        public void StapIn()
        {
            AantalPassagiers++;
        }

        public void StapUit()
        {
            AantalPassagiers--;
        }
    }
public class Lijn
    {
        public int LijnNr { get; set; }
        public List<Halte> Haltes { get; set; }

        public Lijn(int lijnNr)
        {
            LijnNr = lijnNr;
            Haltes = new List<Halte>();
        }

        public void AddHalte(Halte halte)
        {
            Haltes.Add(halte);
        }

        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            TimeSpan returnValue = TimeSpan.FromSeconds(0);
            foreach(Halte halte in Haltes)
            {
                returnValue += halte.Reisduur;
            }
            return returnValue;
        }
        #endregion
    }
public class Halte
    {
        public string Naam { get; set; }
        public TimeSpan Reisduur { get; set; }

        public Halte(string naam, TimeSpan reisduur)
        {
            Naam = naam;
            Reisduur = reisduur;
        }
    }

NakijkTool.TestRapport 	 ---End---------------------

JULI7164 	 ---Begin---------------------
Compiler Errors:
(16,29): error CS1729: 'QuestionAndTest.Lijn' does not contain a constructor that takes 1 arguments
(19,18): error CS1061: 'QuestionAndTest.Lijn' does not contain a definition for 'AddHalte' and no extension method 'AddHalte' accepting a first argument of type 'QuestionAndTest.Lijn' could be found (are you missing a using directive or an assembly reference?)
(20,18): error CS1061: 'QuestionAndTest.Lijn' does not contain a definition for 'AddHalte' and no extension method 'AddHalte' accepting a first argument of type 'QuestionAndTest.Lijn' could be found (are you missing a using directive or an assembly reference?)
(21,18): error CS1061: 'QuestionAndTest.Lijn' does not contain a definition for 'AddHalte' and no extension method 'AddHalte' accepting a first argument of type 'QuestionAndTest.Lijn' could be found (are you missing a using directive or an assembly reference?)
(22,18): error CS1061: 'QuestionAndTest.Lijn' does not contain a definition for 'AddHalte' and no extension method 'AddHalte' accepting a first argument of type 'QuestionAndTest.Lijn' could be found (are you missing a using directive or an assembly reference?)
(23,18): error CS1061: 'QuestionAndTest.Lijn' does not contain a definition for 'AddHalte' and no extension method 'AddHalte' accepting a first argument of type 'QuestionAndTest.Lijn' could be found (are you missing a using directive or an assembly reference?)
(24,18): error CS1061: 'QuestionAndTest.Lijn' does not contain a definition for 'AddHalte' and no extension method 'AddHalte' accepting a first argument of type 'QuestionAndTest.Lijn' could be found (are you missing a using directive or an assembly reference?)
##################

JULI7164,CompileError,
public class Bus
    {
        private string voornaam;
        private string achternaam;

        public int BusNr
        {
            get { return BusNr; }
        }

        public int AantalPassagier
        {
            get { return AantalPassagier; }
        }

        public Lijn RijdOpLijn
        {
            get { return RijdOpLijn; }
        }

        public DateTime Vertrektijd
        {
            get { return Vertrektijd; }
        }

        public string BestuuderNaam
        {
            get { return BestuuderNaam; }
        }

        public Bus(int BusNr, Lijn lijn, DateTime vertrektijd, string voornaam, string achternaam)
        {
            this.voornaam = voornaam;
            this.achternaam = achternaam;
        }

        public void StapIn()
        {

        }

        public void Stapuit()
        {

        }
    }
public class Lijn
    {
        public int LijnNr
        {
            get { return LijnNr; }
        }

        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            TimeSpan T = TimeSpan.FromSeconds(0);
            return TimeSpan.MaxValue;
        }
        #endregion
    }
public class Halte
    {
        public string Naam { get { return Naam; } }
        public TimeSpan Reisduur { get { return Reisduur; } }

        public Halte(string naam, TimeSpan reisduur)
        {

        }
    }

NakijkTool.TestRapport 	 ---End---------------------

KARL3288 	 ---Begin---------------------
Compiler Errors:
(328,21): error CS1525: Invalid expression term '>'
##################

KARL3288,CompileError,

NakijkTool.TestRapport 	 ---End---------------------

KENN7620 	 ---Begin---------------------
Compiler Errors:
(17,27): error CS1729: 'QuestionAndTest.Bus' does not contain a constructor that takes 5 arguments
##################

KENN7620,CompileError,
public class Bus
    {
        public int BusNr
        {
            get { return BusNr; }
            set { BusNr = value;  }

        }

        public int AantalPassagiers
        {
            get { return AantalPassagiers; }
            set { AantalPassagiers = value;  }
        }

        public Lijn RijdOpLijn
        {
            get { return RijdOpLijn; }
            set { RijdOpLijn = value; }
        }

        public DateTime Vertrektijd
        {
            get { return Vertrektijd; }
            set { Vertrektijd = value; }
        }

        public string BestuurderNaam
        {
            
            get { return BestuurderNaam; }
            set { BestuurderNaam = value;  }

        }

        private string _voornaam;
        private string _achternaam;

        public Bus (int busNr, DateTime vertrektijd, string voornaam, string achternaam)
        {
            this.BusNr = busNr;
            this.Vertrektijd = vertrektijd;
            this._voornaam = voornaam;
            this._achternaam = achternaam;
        }

        public void StapIn()
        {
            AantalPassagiers++;
        }

        public void StapUit()
        {
            AantalPassagiers = AantalPassagiers - 1;
        }
    }
public class Lijn
    {
        public int LijnNr
        {
            get { return LijnNr; }
            set { LijnNr = value; }
        }

        public List<Halte> Haltes
        {
            get { return Haltes; }
            set { Haltes = value; }
        }

        public Lijn (int lijnNr)
        {
            this.LijnNr = lijnNr;
        }

        public void AddHalte (Halte halte)
        {
            Haltes.Add(halte);
        }

        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            TimeSpan t = TimeSpan.FromSeconds(0);
            int Huidigehalte = 0;
            int AantalHaltes = Haltes.Count;
            double Reistijd = 0;

            while (Huidigehalte >= 0 && Huidigehalte < AantalHaltes)
            {
                Huidigehalte++;

                t.Add(t);
            }

            return t;
        }
        #endregion
    }
public class Halte
    {
        public string Naam
        {
            get { return Naam; }
            set { Naam = value; }
        }

        public TimeSpan Reisduur
        {
            get { return Reisduur; }
            set { Reisduur = value; }
        }

        public Halte (string naam, TimeSpan reisduur)
        {
            this.Naam = naam;
            this.Reisduur = reisduur;
        }
    }

NakijkTool.TestRapport 	 ---End---------------------

KENT7416 	 ---Begin---------------------
KENT7416,Correct,
public class Bus
    {
        int busnr;
        int aantalpassagiers;
        Lijn rijdoplijn;
        DateTime vertrektijd;
        string bestuurdernaam;
        private string _voornaam;
        private string _achternaam;

        public int BusNr
        {
            get { return this.busnr; }
            set { this.busnr = value; }
        }

        public int AantalPassagiers
        {
            get { return this.aantalpassagiers; }
            set { this.aantalpassagiers = value; }
        }

        public Lijn RijdOpLijn
        {
            get { return this.rijdoplijn; }
            set { this.rijdoplijn = value; }
        }

        public DateTime Vertrektijd
        {
            get { return this.vertrektijd; }
            set { this.vertrektijd = value; }
        }

        public string BestuurderNaam
        {
            get { return _voornaam + " " + _achternaam; }
            set { bestuurdernaam = value; }
        }

        public Bus(int busNr, Lijn lijn, DateTime vertrektijd, string voornaam, string achternaam)
        {
            this.busnr = busNr;
            this.RijdOpLijn = lijn;
            this.vertrektijd = vertrektijd;
            this._voornaam = voornaam;
            this._achternaam = achternaam;
        }

        public void StapIn()
        {
            aantalpassagiers++;
        }

        public void StapUit()
        {
            aantalpassagiers--;
        }
    }
public class Lijn
    {
        int lijnnr;
        List<Halte> haltes = new List<Halte>();

        public int LijnNr
        {
            get { return this.lijnnr; }
            set { this.lijnnr = value; }
        }

        public List<Halte> Haltes
        {
            get { return this.haltes; }
            set { this.haltes = value; }
        }

        public Lijn(int lijnNr)
        {
            this.LijnNr = lijnNr;
        }

        public void AddHalte(Halte halte)
        {
            haltes.Add(halte);
        }

        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            TimeSpan t = TimeSpan.FromMinutes(0);
            for (int i = 0; i < haltes.Count; i++)
            {
                t += haltes[i].Reisduur;
            }
            return t;
        }
        #endregion
    }
public class Halte
    {
        string naam = string.Empty;
        TimeSpan reisduur;

        public string Naam
        {
            get { return this.naam; }
            set { this.naam = value; }
        }

        public TimeSpan Reisduur
        {
            get { return this.reisduur; }
            set { this.reisduur = value; }
        }

        public Halte(string naam, TimeSpan reisduur)
        {
            this.Naam = naam;
            this.Reisduur = reisduur;
        }
    }

NakijkTool.TestRapport 	 ---End---------------------

KRIS6980 	 ---Begin---------------------
KRIS6980,Correct,
public class Bus
    {
        public int BusNr { get; }
        public int AantalPassagiers { get; private set; }
        public Lijn RijdOpLijn { get; }
        public DateTime Vertrektijd { get; }
        public string BestuurderNaam { get; }
        private string _voornaam;
        private string _achternaam;

        public Bus(int busNr, Lijn lijn, DateTime vertrekTijd, string voornaam, string achternaam)
        {
            BusNr = busNr;
            RijdOpLijn = lijn;
            Vertrektijd = vertrekTijd;
            _voornaam = voornaam;
            _achternaam = achternaam;
            BestuurderNaam = _voornaam + " " + _achternaam;
        }

        public void StapIn()
        {
            AantalPassagiers++;
        }
        public void StapUit()
        {
            AantalPassagiers--;
        }
    }
public class Lijn
    {
        public int LijnNr { get; }
        public List<Halte> Haltes { get; }

        public Lijn(int lijnNr)
        {
            LijnNr = lijnNr;
            Haltes = new List<Halte>();
        }

        public void AddHalte(Halte halte)
        {
            Haltes.Add(halte);
        }

        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            TimeSpan total = TimeSpan.FromSeconds(0);
            foreach(Halte halte in Haltes)
            {
                total += halte.Reisduur;
            }
            return total;
        }
        #endregion
    }
public class Halte
    {
        public string Naam { get; }
        public TimeSpan Reisduur { get; }

        public Halte(string naam, TimeSpan reisduur)
        {
            Naam = naam;
            Reisduur = reisduur;
        }
    }

NakijkTool.TestRapport 	 ---End---------------------

KRIS7275 	 ---Begin---------------------
KRIS7275,ExceptionDuringExecution,
Runtime exception: System.NullReferenceException: Object reference not set to an instance of an object.
   at Tentamens.QuestionAndTest.Lijn.Reistijd()
   at Tentamens.QuestionAndTest.TestVraag3() Exception has been thrown by the target of an invocation.
public class Bus
    {
        public int BusNr;
        public int AantalPassagiers;
        public Lijn RijdOpLijn;
        public DateTime Vertrektijd;
        public string BestuurderNaam;
        private string _voornaam;
        private string _achternaam;

        public Bus(int busNr, Lijn lijn, DateTime vertrektijd, string voornaam, string achternaam)
        {
            _voornaam = voornaam;
            _achternaam = achternaam;
            BestuurderNaam = voornaam + " " + achternaam;
            BusNr = busNr;
            RijdOpLijn = lijn;
        }
        public void StapIn()
        {
            AantalPassagiers++;
        }
        public void StapUit()
        {
            AantalPassagiers--;
        }         
    }
public class Lijn
    {
        public int LijnNr;
        public List<Halte> Haltes;
        
        

        public Lijn (int lijnNr) 
        {
             lijnNr = 612;
            LijnNr = lijnNr;
        }
        public void AddHalte (Halte halte)
        {
            
        //    Haltes.Add(halte);
           
        }
        //Vraag 3 Hier invullen!

        //Lijst heeft reistijd
        // reistijd berekend totale reistijd
        // gebruik reisduur van Halte
        #region Vraag3
        public TimeSpan Reistijd()
        {
            TimeSpan Tijd = TimeSpan.FromMinutes(0);
            //double TimeSpan.TotalMinutes;
            //while(Tijd != TimeSpan.Zero)
            //{

            //}
          //  TimeSpan Newtijd = Haltes.Sum<Halte>;
            for (int i = 0; i < Haltes.Count; i++)
            {
               // TimeSpan Tijd1 = Haltes[i].Reisduur.Minutes;
                
            }

            return Tijd;
        }
        #endregion
    }
public class Halte
    {
        public string Naam;
        public TimeSpan Reisduur;

        public Halte (string naam, TimeSpan reisduur)
        {
           
            Naam = naam;
            Reisduur = reisduur;
        }
    }

NakijkTool.TestRapport 	 ---End---------------------

KRIS9526 	 ---Begin---------------------
KRIS9526,Correct,
public class Bus
    {
        private string _voornaam;
        private string _achternaam;
        private int busNr;
        private int aantalPassagiers;
        private Lijn rijdOpLijn;
        private DateTime vertrektijd;
        private string bestuurderNaam;

        public int BusNr { get { return busNr; } }
        public int AantalPassagiers {get{ return aantalPassagiers; } set { aantalPassagiers = value; } }
        public Lijn RijdOpLijn { get { return rijdOpLijn; } }
        public DateTime Vertrektijd { get { return vertrektijd; } }
        public string BestuurderNaam {get{ return bestuurderNaam; } set { bestuurderNaam = value; } }

        public Bus(int busNr, Lijn lijn, DateTime vertrektijd, string voornaam, string achternaam, int aantalPassagiers = 0)
        {
            this.busNr = busNr;
            this.rijdOpLijn = lijn;
            this.vertrektijd = vertrektijd;
            this._voornaam = voornaam;
            this._achternaam = achternaam;
            this.aantalPassagiers = aantalPassagiers;
            bestuurderNaam = voornaam + " " + achternaam;
        }

        public void StapIn()
        {
            aantalPassagiers++;
        }
        public void StapUit()
        {
            if (aantalPassagiers > 0)
            {
                aantalPassagiers--;
            }
        }

    }
public class Lijn
    {
        private int lijnNr;
        private List<Halte> haltes = new List<Halte>();

        public int LijnNr { get { return lijnNr; } }
        public List<Halte> Haltes { get { return haltes; } }


        public Lijn(int lijnNr)
        {
            this.lijnNr = lijnNr;
        }

        public void AddHalte(Halte halte)
        {
            haltes.Add(halte);
        }


        #region Vraag3
        public TimeSpan Reistijd()
        {
            TimeSpan totaal = TimeSpan.FromSeconds(0);
            foreach (Halte halte in haltes)
            {
                totaal += halte.Reisduur;
            }
            return totaal;
        }
        #endregion
    }
public class Halte
    {
        private string naam;
        private TimeSpan reisduur;

        public string Naam { get { return naam; } }
        public TimeSpan Reisduur { get { return reisduur; } }

        public Halte(string naam, TimeSpan reisduur)
        {
            this.naam = naam;
            this.reisduur = reisduur;
        }
    }

NakijkTool.TestRapport 	 ---End---------------------

KYOK8089 	 ---Begin---------------------
Compiler Errors:
(105,24): error CS0117: 'QuestionAndTest.Halte' does not contain a definition for 'reisduur'
##################

KYOK8089,CompileError,
public class Bus
    {
        private string voornaam;
        private string achternaam;
        public int Busnr
        {
            get;
            set;
        }
        public int AantalPassagiers
        {
            get;
            set;
        }
        public Lijn Rijdoplijn
        {
            get;
            set;
        }
        public DateTime Vertrektijd
        {
            get;
            set;
        }
        public string BestuurderNaam
        {
            get;
            set;
        }

        public Bus (int busnr,Lijn lijn, DateTime vertrektijd, string voornaam,string achternaam)
        {
            this.Busnr = busnr;
            this.Rijdoplijn = lijn;
            this.Vertrektijd = vertrektijd;
            this.voornaam = voornaam;
            this.achternaam = achternaam;
        }
        public void StapIn()
        {

        }
        public void StapUit()
        {

        }
    }
public class Lijn
    {
        public int Lijnnr
        {
            get;
            set;
        }
        public List<Halte> Haltes
        {
            get;
            set;
          
        }
        public void AddHalte(Halte halte)
        {
            //Haltes.Add(halte);
            //List initialiseren om haltes op te slaan
        }
        public Lijn(int lijnnr)
        {
            this.Lijnnr = lijnnr;
        }
        public TimeSpan ReisTijd()
        {
            
            TimeSpan t = TimeSpan.FromSeconds(0);
            t += Halte.reisduur;
            return t;

        }

        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            throw new NotImplementedException();
        }
        #endregion
    }
public class Halte
    {
        public string Naam
        {
            get;
            set;
        }
        public TimeSpan Reisduur
        {
            get;
            set;
        }
        public Halte (string naam, TimeSpan reisduur)
        {
            this.Naam = naam;
            this.Reisduur = reisduur;
        }
       
    }

NakijkTool.TestRapport 	 ---End---------------------

LANE3745 	 ---Begin---------------------
LANE3745,Correct,
public class Bus
    {
        private string _voornaam;
        private string _achternaam;

        public int BusNr;
        public int AantalPassagiers;
        public Lijn RijdOpLijn;
        public DateTime Vertrektijd;
        public string BestuurderNaam;

        public Bus(int busNr, Lijn lijn, DateTime vertrektijd, string voornaam, string achternaam)
        {
            this._voornaam = voornaam;
            this._achternaam = achternaam;
            this.Vertrektijd = vertrektijd;
            this.RijdOpLijn = lijn;
            this.BusNr = busNr;
            this.BestuurderNaam = voornaam +" "+ achternaam;
            AantalPassagiers = 0;
        }

        public void StapIn()
        {
            AantalPassagiers++;
        }
        public void StapUit()
        {
            AantalPassagiers--;
        }
    }
public class Lijn
    {
        public int LijnNr;
        public List<Halte> Haltes= new List<Halte>();

        public Lijn(int LijnNr)
        {
            this.LijnNr = LijnNr;
        }
        public void AddHalte(Halte halte)
        {
            Haltes.Add(halte);
        }

        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            TimeSpan t = TimeSpan.FromSeconds(0);
            foreach(Halte h in Haltes)
            {
                t += h.Reisduur;
            }
            return t;
        }
        #endregion
    }
public class Halte
    {
        public string Naam;
        public TimeSpan Reisduur;

        public Halte(string naam, TimeSpan reisduur)
        {
            this.Naam = naam;
            this.Reisduur = reisduur;
        }
    }

NakijkTool.TestRapport 	 ---End---------------------

LARR4533 	 ---Begin---------------------
LARR4533,ExceptionDuringExecution,
Runtime exception: System.NotImplementedException: The method or operation is not implemented.
   at Tentamens.QuestionAndTest.Lijn.Reistijd()
   at Tentamens.QuestionAndTest.TestVraag3() Exception has been thrown by the target of an invocation.
public class Bus
    {
        private string _voornaam;
        private string _achternaam;

        public int BusNr { get; set; }
        public int AantalPassagiers { get { return AantalPassagiers; } set { AantalPassagiers = value; } }
        public Lijn RijdOpLijn { get; set;}
        public DateTime Vertrektijd { get; set;}
        public string BestuurderNaam { get; set; }

        public Bus(int busNr, Lijn lijn, DateTime vertrektijd, string voornaam, string achternaam)
        {
            this.BusNr = busNr;
            this.RijdOpLijn = lijn;
            this.Vertrektijd = vertrektijd;
            this._voornaam = voornaam;
            this._achternaam = achternaam;
        }

        public void StapIn()
        {

        }

        public void StapUit()
        {

        }
    }
public class Lijn
    {
        public int LijnNr { get; set; }
        public List<Halte> Haltes = new List<Halte>();

        public Lijn(int lijnNr)
        {
            this.LijnNr = lijnNr;
        }

        public void AddHalte(Halte halte)
        {

        }

        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            
            throw new NotImplementedException();
        }
        #endregion
    }
public class Halte
    {
        public string Naam { get; }
        public TimeSpan Reisduur { get; set; }

        public Halte(string naam, TimeSpan reisduur)
        {
            this.Naam = naam;
            this.Reisduur = reisduur;
        }
    }

NakijkTool.TestRapport 	 ---End---------------------

LEON3342 	 ---Begin---------------------
LEON3342,ExceptionDuringExecution,
Runtime exception: System.NullReferenceException: Object reference not set to an instance of an object.
   at Tentamens.QuestionAndTest.Lijn.AddHalte(Halte halte)
   at Tentamens.QuestionAndTest.TestVraag3() Exception has been thrown by the target of an invocation.
public class Bus
    {
        public int BusNr { get; set; }
        public int AantalPassagiers { get; set; }
        public Lijn RijdOpLijn { get; }
        public DateTime Vertrektijd { get; set; }
        public string BestuurderNaam { get { return BestuurderNaam;  } set { BestuurderNaam = _voornaam + _achternaam; } }
        string _voornaam;
        string _achternaam;

        public Bus(int busNr, Lijn lijn, DateTime vertrektijd, string voornaam, string achternaam)
        {
            busNr = BusNr;
            lijn = RijdOpLijn;
            vertrektijd = Vertrektijd;
            achternaam = _achternaam;
            voornaam = _voornaam;

        }

        public void StapIn()
        {

        }

        public void StapUit()
        {

        }
    }
public class Lijn
    {
        public int LijnNr { get; }
        public List<Halte> Haltes { get; set; }

        public Lijn(int lijnNr)
        {
            lijnNr = LijnNr;
        }

        public void AddHalte(Halte halte)
        {
            Haltes.Add(halte);
        }


        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            throw new NotImplementedException();
        }
        #endregion
    }
public class Halte
    {
        public string Naam { get;  }
        public TimeSpan Reisduur { get; set; }

        public Halte (string naam, TimeSpan reisduur)
        {
            naam = Naam;
            reisduur = Reisduur;
        }
    }

NakijkTool.TestRapport 	 ---End---------------------

LORA2508 	 ---Begin---------------------
LORA2508,Correct,
public class Bus
    {
        private int busNr;
        private int aantalPassagiers;
        private Lijn rijdOpLijn;
        private DateTime vertrektijd;
        private string bestuurderNaam;
        private string _voornaam;
        private string _achternaam;

        public string BestuurderNaam
        {
            get
            {
                return bestuurderNaam;
            }

            set
            {
                bestuurderNaam = value;
            }
        }

        public int BusNr
        {
            get
            {
                return busNr;
            }

            set
            {
                busNr = value;
            }
        }

        public int AantalPassagiers
        {
            get
            {
                return aantalPassagiers;
            }

            set
            {
                aantalPassagiers = value;
            }
        }

        public Lijn RijdOpLijn
        {
            get
            {
                return rijdOpLijn;
            }

            set
            {
                rijdOpLijn = value;
            }
        }

        public DateTime Vertrektijd
        {
            get
            {
                return vertrektijd;
            }

            set
            {
                vertrektijd = value;
            }
        }

        public Bus(int busNr, Lijn lijn, DateTime vertrektijd, string voornaam, string achternaam )
        {
            BusNr = busNr;
            Vertrektijd = vertrektijd;
            RijdOpLijn = lijn;
            _voornaam = voornaam;
            _achternaam = achternaam;
            bestuurderNaam = voornaam + " " + achternaam;
        }

        public void StapIn()
        {
            AantalPassagiers++;
        }
        public void StapUit()
        {
            AantalPassagiers--;
        }
    }
public class Lijn
    {
        private int lijnNr;
        private List<Halte> haltes = new List<Halte>();

        public int LijnNr
        {
            get
            {
                return lijnNr;
            }

            set
            {
                lijnNr = value;
            }
        }

        public List<Halte> Haltes
        {
            get
            {
                return haltes;
            }

            set
            {
                haltes = value;
            }
        }

        public Lijn(int lijnNr)
        {
            LijnNr = lijnNr;
        }
        public void AddHalte(Halte halte)
        {
            Haltes.Add(halte);
        }

        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            TimeSpan t = TimeSpan.FromSeconds(0);
            foreach (Halte halte in Haltes)
            {
                t += halte.Reisduur;
            }
            return t;
        }
        #endregion
    }
public class Halte
    {
        private string naam;
        private TimeSpan reisduur;

        public string Naam
        {
            get
            {
                return naam;
            }

            set
            {
                naam = value;
            }
        }

        public TimeSpan Reisduur
        {
            get
            {
                return reisduur;
            }

            set
            {
                reisduur = value;
            }
        }

        public Halte(string naam, TimeSpan reisduur)
        {
            Naam = naam;
            Reisduur = reisduur;
        }
    }

NakijkTool.TestRapport 	 ---End---------------------

LORE7020 	 ---Begin---------------------
Compiler Errors:
(52,16): error CS1525: Invalid expression term '}'
(52,16): error CS1002: ; expected
(246,22): error CS1001: Identifier expected
(246,22): error CS1002: ; expected
##################

LORE7020,CompileError,

NakijkTool.TestRapport 	 ---End---------------------

LUIS5466 	 ---Begin---------------------
LUIS5466,Correct,
public class Bus
    {
        private string _voornaam;
        private string _achternaam;

        public int BusNr { get; set; }
        public int AantalPassagiers { get; set; }
        public Lijn RijdOpLijn { get; set; }
        public DateTime Vertrektijd { get; set; }
        public string BestuurderNaam { get; set; }

        public Bus(int busNr, Lijn lijn, DateTime vertrektijd, string voornaam, string achternaam)
        {
            BusNr = busNr;
            RijdOpLijn = lijn;
            Vertrektijd = vertrektijd;
            BestuurderNaam = voornaam + " " + achternaam;

            this._voornaam = voornaam;
            this._achternaam = achternaam;
        }

        public void StapIn()
        {
            // Verhoog het aantal passagiers
            AantalPassagiers += 1;
        }

        public void StapUit()
        {
            // Verlaag het aantal passagiers
            AantalPassagiers -= 1;
        }
    }
public class Lijn
    {
        public int LijnNr { get; set; }
        public List<Halte> Haltes = new List<Halte>();

        public Lijn(int lijnNr)
        {
            // Set lijnnummer
            LijnNr = lijnNr;
        }

        public void AddHalte(Halte halte)
        {
            // Halte toevoegen
            Haltes.Add(halte);
        }

        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            TimeSpan reistijd = TimeSpan.FromSeconds(0);
            
            foreach (var halte in Haltes) {
                reistijd += halte.Reisduur;
            }

            return reistijd;
        }
        #endregion
    }
public class Halte
    {
        public string Naam { get; set; }
        public TimeSpan Reisduur { get; set; }

        public Halte(string naam, TimeSpan reisduur)
        {
            Naam = naam;
            Reisduur = reisduur;
        }
    }

NakijkTool.TestRapport 	 ---End---------------------

LUKE1767 	 ---Begin---------------------
Compiler Errors:
(16,29): error CS1729: 'QuestionAndTest.Lijn' does not contain a constructor that takes 1 arguments
(17,27): error CS1729: 'QuestionAndTest.Bus' does not contain a constructor that takes 5 arguments
(19,31): error CS1729: 'QuestionAndTest.Halte' does not contain a constructor that takes 2 arguments
(20,31): error CS1729: 'QuestionAndTest.Halte' does not contain a constructor that takes 2 arguments
(21,31): error CS1729: 'QuestionAndTest.Halte' does not contain a constructor that takes 2 arguments
(22,31): error CS1729: 'QuestionAndTest.Halte' does not contain a constructor that takes 2 arguments
(23,31): error CS1729: 'QuestionAndTest.Halte' does not contain a constructor that takes 2 arguments
(24,31): error CS1729: 'QuestionAndTest.Halte' does not contain a constructor that takes 2 arguments
##################

LUKE1767,CompileError,
public class Bus
    {
        public void StapIn()
        {

        }

        public void StapUit()
        {

        }
      
    }
public class Lijn
    {
        public void AddHalte()
        {

        }


        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            // Je moet de timespan gwn bij elkaar optellen door het gebruik te maken van de public void AddHalte.
            
            throw new NotImplementedException();
        }
        #endregion
    }
public class Halte
    {
    }

NakijkTool.TestRapport 	 ---End---------------------

LYLE1999 	 ---Begin---------------------
LYLE1999,Correct,
public class Bus
    {
        int _busnr;
        int _aantpass = 0;
        Lijn _lijn;
        DateTime _vertekt;
        string _voornaam;
        string _achternaam;
        public Bus(int busNr, Lijn lijn, DateTime vertrektijd, string voornaam, string achternaam)
        {
            _busnr = busNr;
            _lijn = lijn;
            _vertekt = vertrektijd;
            _voornaam = voornaam;
            _achternaam = achternaam;
        }
        public int BusNr
        {
            get
            {
                return _busnr;
            }
        }
        public int AantalPassagiers
        {
            get
            {
                return _aantpass;
            }
        }
        public Lijn RijdOpLijn
        {
            get
            {
                return _lijn;
            }
        }
        public DateTime Vertrektijd
        {
            get
            {
                return _vertekt;
            }
        }
        public String BestuurderNaam
        {
            get
            {
                return String.Format("{0} {1}", _voornaam, _achternaam);
            }
        }
        public void StapIn()
        {
            _aantpass++;
        }
        public void StapUit()
        {
            if (_aantpass > 0)
            {
                _aantpass--;
            }
            else
            {
                throw new Exception("Bus is al leeg!");
            }
        }
    }
public class Lijn
    {
        int _lijnnr;
        List<Halte> _haltes = new List<Halte>();
        public Lijn(int lijnNr)
        {
            _lijnnr = lijnNr;
        }
        public int LijnNr
        {
            get
            {
                return _lijnnr;
            }
        }
        public List<Halte> Haltes
        {
            get
            {
                return _haltes;
            }
        }
        public void AddHalte(Halte halte)
        {
            _haltes.Add(halte);
        }
        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            TimeSpan t = TimeSpan.FromSeconds(0);
            foreach(Halte h in _haltes) t += h.Reisduur;
            return t;
        }
        #endregion
    }
public class Halte
    {
        string _naam;
        TimeSpan _reisduur;
        public Halte(string naam, TimeSpan reisduur)
        {
            _naam = naam;
            _reisduur = reisduur;
        }
        public string Naam
        {
            get
            {
                return _naam;
            }
        }
        public TimeSpan Reisduur
        {
            get
            {
                return _reisduur;
            }
        }
    }

NakijkTool.TestRapport 	 ---End---------------------

LYND5408 	 ---Begin---------------------
LYND5408,Correct,
public class Bus
    {
        // properties aanmaken
        public int BusNr { get; set; }
        public int AantalPassagiers { get; set; }
        public Lijn RijdOpLijn { get; set; }
        public DateTime Vertrektijd { get; set; }
        public string BestuurderNaam { get; set; }

        // variables aanmaken
        private string _voornaam;
        private string _achternaam;

        public Bus( int busNr, Lijn lijn, DateTime vertrektijd, string voornaam, string achternaam )
        {
            // parameters toekennen aan de variables van de class
            this.BusNr = busNr;
            this.RijdOpLijn = lijn;
            this.Vertrektijd = vertrektijd;
            this._voornaam = voornaam;
            this._achternaam = achternaam;
            this.BestuurderNaam = voornaam + " " + achternaam;
        }

        public void StapIn( )
        {
            // aantal passagiers van de bus omhoog doen als er iemand instapt
            AantalPassagiers++;
        }

        public void StapUit( )
        {
            // aantal passagiers van de bus omlaag doen als er iemand uitstapt
            AantalPassagiers--;
        }
    }
public class Lijn
    {
        // properties en variables aanmaken
        private List<Halte> haltes = new List<Halte>();

        public int LijnNr { get; set; }
        public List<Halte> Haltes
        {
            get { return haltes; }
            set { haltes = value; }
        }
        public Lijn( int lijnNr )
        {
            // parameter toekennen aan de variable van de class
            this.LijnNr = lijnNr;
        }

        public void AddHalte( Halte halte )
        {
            // een halte toevoegen aan de lijst met haltes
            Haltes.Add( halte );
        }

        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            // variable aanmaken waar de totale reisduur in wordt bewaard
            TimeSpan reisduur = TimeSpan.FromSeconds( 0 );

            foreach( Halte halte in Haltes )
            {
                // de reisduur van de huidige halte toevoegen aan de totale reistijd
                reisduur += halte.Reisduur;
            }

            // reisduur teruggeven
            return reisduur;
        }
        #endregion
    }
public class Halte
    {
        // properties en variables aanmaken
        public string Naam { get; set; }
        public TimeSpan Reisduur { get; set; }

        public Halte( string naam, TimeSpan reisduur )
        {
            // parameters toekennen aan variables van de class
            this.Naam = naam;
            this.Reisduur = reisduur;
        }
    }

NakijkTool.TestRapport 	 ---End---------------------

MARC5765 	 ---Begin---------------------
MARC5765,Correct,
public class Bus
    {
        public int BusNr;
        public int AantalPassagiers;
        public Lijn RijdOpLijn;
        public DateTime Vertrektijd;
        public string BestuurderNaam;

        private string _voornaam;
        private string _achternaam;

        public Bus(int busNr, Lijn lijn, DateTime vertrekTijd, string voornaam, string achternaam)
        {
            BusNr = busNr;
            RijdOpLijn = lijn;
            Vertrektijd = vertrekTijd;
            _voornaam = voornaam;
            _achternaam = achternaam;
            BestuurderNaam = _voornaam + " " + _achternaam;
            AantalPassagiers = 0;
        }

        public void StapIn()
        {
            AantalPassagiers++;
        }

        public void StapUit()
        {
            AantalPassagiers--;
        }
    }
public class Lijn
    {
        public int LijnNr;
        public List<Halte> Haltes = new List<Halte>();
        
        public Lijn(int lijnNr)
        {
            LijnNr = lijnNr;
        }

        public void AddHalte(Halte halte)
        {
            Haltes.Add(halte);
        }

        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            TimeSpan totaal = TimeSpan.Zero;
            foreach (Halte h in Haltes)
            {
                totaal += h.Reisduur;
            }
            return totaal;
        }
        #endregion
    }
public class Halte
    {
        public string Naam;
        public TimeSpan Reisduur;

        public Halte(string naam, TimeSpan reisduur)
        {
            Naam = naam;
            Reisduur = reisduur;
        }
    }

NakijkTool.TestRapport 	 ---End---------------------

MARG7204 	 ---Begin---------------------
MARG7204,Correct,
public class Bus
    {
        public int BusNr { get; set; }
        public int AantalPassagiers { get; set; }
        public Lijn RijdOpLijn { get; set; }
        public DateTime Vertrektijd { get; set; }
        public string BestuurderNaam { get; set; }
        private string _voornaam;
        private string _achternaam;

        public Bus(int busNr, Lijn lijn, DateTime vertrektijd, string voornaam, string achternaam)
        {
            BusNr = busNr;
            RijdOpLijn = lijn;
            Vertrektijd = vertrektijd;
            _voornaam = voornaam;
            _achternaam = achternaam;
            BestuurderNaam = voornaam + " " + achternaam;
        }

        public void StapIn()
        {
            AantalPassagiers++;
        }

        public void StapUit()
        {
            AantalPassagiers--;
        }
    }
public class Lijn
    {
        public int LijnNr { get; set; }
        public List<Halte> Haltes { get; set; }

        public Lijn(int lijnNr)
        {
            LijnNr = lijnNr;
            Haltes = new List<Halte>();
        }

        public void AddHalte(Halte halte)
        {
            Haltes.Add(halte);
        }

        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            TimeSpan reistijd = TimeSpan.FromSeconds(0);
            foreach (Halte halte in Haltes)
            {
                reistijd += halte.Reisduur;
            }
            return reistijd;
        }
        #endregion
    }
public class Halte
    {
        public string Naam { get; set; }
        public TimeSpan Reisduur { get; set; }

        public Halte(string naam, TimeSpan reisduur)
        {
            Naam = naam;
            Reisduur = reisduur;
        }
    }

NakijkTool.TestRapport 	 ---End---------------------

MARI3455 	 ---Begin---------------------
MARI3455,Correct,
public class Bus
    {
        public int BusNr { get; set; }
        public int AantalPassagiers { get; set; }
        public Lijn RijdOpLijn { get; set; }
        public DateTime Vertrektijd { get; set; }
        private string _voornaam;
        private string _achternaam;

        public string BestuurderNaam
        {
            get
            {
                return _voornaam + " " + _achternaam;
            }
        }
        public Bus(int busNr, Lijn lijn, DateTime vertrektijd, string voornaam, string achternaam)
        {
            BusNr = busNr;
            RijdOpLijn = lijn;
            Vertrektijd = vertrektijd;
            _voornaam = voornaam;
            _achternaam = achternaam;
        }

        public void StapIn()
        {
            AantalPassagiers++;
        }

        public void StapUit()
        {
            AantalPassagiers--;
        }
    }
public class Lijn
    {
        public int LijnNr { get; set; }
        private List<Halte> _haltes = new List<Halte>();

        public List<Halte> Haltes {  get { return _haltes; } }

        public Lijn(int lijnNr)
        {
            LijnNr = lijnNr;
        }

        public void AddHalte(Halte halte)
        {
            Haltes.Add(halte);
        }

        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            TimeSpan result = new TimeSpan(0);
            foreach(var halte in Haltes)
            {
                result += halte.Reisduur;
            }
            return result;
        }
        #endregion
    }
public class Halte
    {
        public string Naam { get; set; }
        public TimeSpan Reisduur { get; set; }

        public Halte(string naam, TimeSpan reisduur)
        {
            Naam = naam;
            Reisduur = reisduur;
        }
    }

NakijkTool.TestRapport 	 ---End---------------------

MARL3334 	 ---Begin---------------------
MARL3334,Correct,
public class Bus
    {
        private string _voornaam;
        private string _achternaam;

        public int BusNr { get; set; }
        public int AantalPassagiers { get; private set; }
        public Lijn RijdOpLijn { get; set; }
        public DateTime Vertrektijd { get; set; }
        public string BestuurderNaam
        {
            get
            {
                return $"{_voornaam} {_achternaam}";
            }
        }

        public Bus(int busNr, Lijn lijn, DateTime vertrektijd, string voornaam, string achternaam)
        {
            this.BusNr = busNr;
            this.RijdOpLijn = lijn;
            this.Vertrektijd = vertrektijd;
            this._voornaam = voornaam;
            this._achternaam = achternaam;
        }

        public void StapIn()
        {
            AantalPassagiers++;
        }

        public void StapUit()
        {
            if (AantalPassagiers > 0)
                AantalPassagiers--;
        }
    }
public class Lijn
    {
        public int LijnNr { get; set; }
        public List<Halte> Haltes { get; private set; }

        public Lijn(int lijnNr)
        {
            this.LijnNr = lijnNr;
            this.Haltes = new List<Halte>();
        }

        public void AddHalte(Halte halte)
        {
            Haltes.Add(halte);
        }

        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            TimeSpan duur = new TimeSpan();
            foreach (Halte halte in Haltes)
            {
                duur += halte.Reisduur;
            }

            return duur;
        }
        #endregion
    }
public class Halte
    {
        public string Naam { get; }
        public TimeSpan Reisduur { get; set; }

        public Halte(string naam, TimeSpan reisduur)
        {
            this.Naam = naam;
            this.Reisduur = reisduur;
        }
    }

NakijkTool.TestRapport 	 ---End---------------------

MOHA3756 	 ---Begin---------------------
MOHA3756,Correct,
public class Bus
    {
        private int _busNr;
        private int _aantalPassagiers;
        private Lijn _rijdOpLijn;
        private DateTime _vertrekTijd;
        private string _bestuurdersNaam;

        private string _voornaam;
        private string _achternaam;

        public int BusNr {
            get {
                return this._busNr;
            }
        }
        public int AantalPassagiers
        {
            get
            {
                return this._aantalPassagiers;
            }
        }
        public Lijn RijdOpLijn
        {
            get
            {
                return this._rijdOpLijn;
            }
        }
        public DateTime Vertrektijd {
            get
            {
                return this._vertrekTijd;
            }
        }
        public string BestuurderNaam
        {
            get
            {
                return this._voornaam + " " + this._achternaam;
            }
        }

        public Bus(int busNr, Lijn lijn, DateTime vertrektijd, string voornaam, string achternaam)
        {
            this._busNr = busNr;
            this._rijdOpLijn = lijn;
            this._vertrekTijd = vertrektijd;
            this._voornaam = voornaam;
            this._achternaam = achternaam;
        }

        public void StapIn()
        {
            this._aantalPassagiers++;
        }

        public void StapUit()
        {
            this._aantalPassagiers--;
        }
    }
public class Lijn
    {
        private int _lijnNr;
        private List<Halte> _haltes = new List<Halte>();

        public int LijnNr {
            get
            {
                return this._lijnNr;
            }
        }
        public List<Halte> Haltes {
            get
            {
                return this._haltes;
            }

        }
        
        public Lijn(int lijnNr)
        {
            this._lijnNr = lijnNr;
        }

        public void AddHalte(Halte halte)
        {
            this._haltes.Add(halte); 
        }

        public TimeSpan Reistijd()
        {
            TimeSpan _totalReistijd = TimeSpan.FromSeconds(0);
            
            foreach(Halte halte in _haltes)
            {
                _totalReistijd += halte.Reisduur;
            }

            return _totalReistijd;
        }
    }
public class Halte
    {
        private string _naam;
        private TimeSpan _reisduur;

        public string Naam
        {
            get
            {
                return this._naam;
            }
        }
        public TimeSpan Reisduur
        {
            get
            {
                return this._reisduur;
            }

        }

        public Halte(string naam, TimeSpan reisduur)
        {
            this._naam = naam;
            this._reisduur = reisduur;
        }
    }

NakijkTool.TestRapport 	 ---End---------------------

MYRT3264 	 ---Begin---------------------
MYRT3264,Correct,
public class Bus
    {
        private string _voornaam;
        private string _achternaam;

        public int BusNr;
        public int AantalPassagiers;
        public Lijn RijdOpLijn;
        public DateTime Vertrektijd;
        public string BestuurderNaam
        {
            get { return _voornaam + " " + _achternaam; }
        }

        public Bus(int busNr, Lijn lijn, DateTime vertrektijd, string voornaam, string achternaam)
        {
            BusNr = busNr;
            RijdOpLijn = lijn;
            Vertrektijd = vertrektijd;
            _voornaam = voornaam;
            _achternaam = achternaam;
        }

        public void StapIn()
        {
            AantalPassagiers++;
        }

        public void StapUit()
        {
            AantalPassagiers--;
        }
    }
public class Lijn
    {
        public int LijnNr;
        public List<Halte> Haltes = new List<Halte>();

        public Lijn(int lijnNr)
        {
            LijnNr = lijnNr;
        }

        public void AddHalte(Halte halte)
        {
            Haltes.Add(halte);
        }



        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            TimeSpan result = TimeSpan.Zero;
            foreach (var halte in Haltes)
            {
                result = result.Add(halte.Reisduur);
            }

            return result;
        }
        #endregion
    }
public class Halte
    {
        public string Naam;
        public TimeSpan Reisduur;

        public Halte(string Naam, TimeSpan Reisduur)
        {
            this.Naam = Naam;
            this.Reisduur = Reisduur;
        }

    }

NakijkTool.TestRapport 	 ---End---------------------

MYRT9827 	 ---Begin---------------------
MYRT9827,Correct,
public class Bus
    {
        public int BusNr { get; set; }
        public int AantalPassagiers { get; set; }
        public Lijn RijdOpLijn { get; set; }
        public DateTime Vertrektijd { get; set; }
        private string _voornaam;
        private string _achternaam;

        public string BestuurderNaam
        {
            get
            {
                return _voornaam + " " + _achternaam;
            }
        }
        public Bus(int busNr, Lijn lijn, DateTime vertrektijd, string voornaam, string achternaam)
        {
            BusNr = busNr;
            RijdOpLijn = lijn;
            Vertrektijd = vertrektijd;
            _voornaam = voornaam;
            _achternaam = achternaam;
        }

        public void StapIn()
        {
            AantalPassagiers++;
        }

        public void StapUit()
        {
            AantalPassagiers--;
        }
    }
public class Lijn
    {
        public int LijnNr { get; set; }
        private List<Halte> _haltes = new List<Halte>();

        public List<Halte> Haltes {  get { return _haltes; } }

        public Lijn(int lijnNr)
        {
            LijnNr = lijnNr;
        }

        public void AddHalte(Halte halte)
        {
            Haltes.Add(halte);
        }

        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            TimeSpan result = new TimeSpan(0);
            foreach(var halte in Haltes)
            {
                result += halte.Reisduur;
            }
            return result;
        }
        #endregion
    }
public class Halte
    {
        public string Naam { get; set; }
        public TimeSpan Reisduur { get; set; }

        public Halte(string naam, TimeSpan reisduur)
        {
            Naam = naam;
            Reisduur = reisduur;
        }
    }

NakijkTool.TestRapport 	 ---End---------------------

NEDR3814 	 ---Begin---------------------
Compiler Errors:
(93,9): error CS1028: Unexpected preprocessor directive
##################

NEDR3814,CompileError,
public class Bus
    {
        public int BusNr { get; }
        public int AantalPassagiers { get; set; }
        public Lijn RijdOpLijn { get; set; }
        public DateTime Vertrektijd { get; }
        public string BestuurderNaam { get; set; }

        private string _voornaam;
        private string _achternaam;

        public Bus(int busNr, Lijn lijn, DateTime vertrektijd, string voornaam, string achternaam)
        {
            BusNr = busNr;
            RijdOpLijn = lijn;
            Vertrektijd = vertrektijd;
            _voornaam = voornaam;
            _achternaam = achternaam;
            BestuurderNaam = _voornaam + " " + _achternaam;
        }

        public void StapIn()
        {
            AantalPassagiers++;
        }

        public void StapUit()
        {
            AantalPassagiers--;
        }

    }
public class Lijn
    {
        public int LijnNr { get; set; }

        public List<Halte> Haltes = new List<Halte>();

        public Lijn(int lijnNr)
        {
            LijnNr = lijnNr;
            
        }

        public void AddHalte(Halte halte)
        {
            Haltes.Add(halte);
        }

        //Vraag 3 Hier invullen!
        public TimeSpan Reistijd()
        {
            
            TimeSpan tijd = TimeSpan.FromMinutes(0);
            foreach (Halte halte in Haltes)
            {
               tijd += TimeSpan.FromMinutes(Haltes.Capacity / 4);
            }
            
            return tijd;
        }
        #endregion
    }
public class Halte
    {
        public string Naam { get; set; }
        public TimeSpan Reisduur { get; set; }

        public Halte(string naam, TimeSpan reisduur)
        {
            Naam = naam;
            Reisduur = reisduur;
        }
    }

NakijkTool.TestRapport 	 ---End---------------------

NERE4803 	 ---Begin---------------------
Compiler Errors:
(26,38): error CS1955: Non-invocable member 'QuestionAndTest.Lijn.Reistijd' cannot be used like a method.
##################

NERE4803,CompileError,
public class Bus
    {
        // Hier staan de instantie variable van de Bus class
        private string _voornaam;
        private string _achternaam;

        // Hier staan de properties van de Bus class
        public int BusNR
        {
            set;
            get;
        }

        public int AantalPassagiers
        {
            set;
            get;
        }

        public Lijn RijdOpLijn
        {
            set;
            get;
        }

        public DateTime Vetrektijd
        {
            set;
            get;
        }

        public string BestuurNaam
        {
            set{
                _voornaam = _voornaam;
                _achternaam = _achternaam;
            }
            get { 
                return _voornaam + _achternaam;

            }
        }

        // Hier staat de constructor voor de Bus class
        public Bus(int busNr, Lijn lijn, DateTime vetrektijd, string voornaam, string achternaam)
        {
            this.BusNR = busNr;
            this.RijdOpLijn = lijn;
            this.Vetrektijd = vetrektijd;
            this._voornaam = voornaam;
            this._achternaam = achternaam;
        }

        // Hier staan de methodes voor de Bus class
        public void StapIn()
        {

        }

        public void StapUit()
        {

        }

    }
public class Lijn
    {
        // Hier staan de properties van de Lijn class
        public int LijnNr
        {
            set;
            get;
        }

        public List<Halte> Haltes
        {
            set;
            get;
        }

        // Hier staat de constructor voor de Lijn class
        public Lijn(int lijnr)
        {
            this.LijnNr = lijnr;
        }

        // Hier staan de methoden voor de Lijn class
        public void AddHalte(Halte halte)
        {
          
            Haltes.Add(halte);
        }
        
        public TimeSpan Reistijd
        {
            set;
            get;
        }

    }
public class Halte
    {

        // Hier komen de properties te staan voor de class Halte 
        public string Naam
        {
            set;
            get;
        }

        public TimeSpan Reisduur
        {
            set;
            get;
        }

        // Hier staat de constructor van de class Halte
        public Halte(string naam, TimeSpan reisduur)
        {
            this.Naam = naam;
            this.Reisduur = reisduur;
        }

    }

NakijkTool.TestRapport 	 ---End---------------------

PHYL1120 	 ---Begin---------------------
PHYL1120,Correct,
public class Bus
    {
        public int BusNr { get; }
        public int AantalPassagiers { get; set; }
        public Lijn RijdOpLijn { get; }
        public DateTime Vertrektijd { get; }
        public string BestuurderNaam { get; }
        private string Voornaam = null;
        private string Achternaam = null;

        public Bus(int busnr, Lijn lijn, DateTime vertrektijd, string voornaam, string achternaam)
        {
            BusNr = busnr;
            RijdOpLijn = lijn;
            Vertrektijd = vertrektijd;
            Voornaam = voornaam;
            Achternaam = achternaam;
            BestuurderNaam = voornaam + " " + achternaam;
        }

        public void StapIn()
        {
            AantalPassagiers++;
        }

        public void StapUit()
        {
            AantalPassagiers--;
        }
    }
public class Lijn
    {
        public int LijnNr { get; set; }
        public List<Halte> Haltes = new List<Halte>();

        public Lijn(int lijnNr)
        {
            LijnNr = lijnNr;
        }

        public void AddHalte(Halte halte)
        {
            Haltes.Add(halte);
        }


        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            TimeSpan reistijd = TimeSpan.FromSeconds(0);
            foreach (Halte halte in Haltes)
            {
                reistijd = reistijd + halte.Reisduur;
            }

            return reistijd;
        }

        #endregion
    }
public class Halte
    {
        public string Naam { get; }
        public TimeSpan Reisduur { get; }

        public Halte(string naam, TimeSpan reisduur)
        {
            Naam = naam;
            Reisduur = reisduur;
        }
    }

NakijkTool.TestRapport 	 ---End---------------------

PORT4586 	 ---Begin---------------------
PORT4586,ExceptionDuringExecution,
Runtime exception: System.NullReferenceException: Object reference not set to an instance of an object.
   at Tentamens.QuestionAndTest.Lijn.AddHalte(Halte halte)
   at Tentamens.QuestionAndTest.TestVraag3() Exception has been thrown by the target of an invocation.
public class Bus
    {
        private string _voornaam;
        private string _achternaam;
        private int busNr;
        private Lijn lijn;
        private DateTime vertrektijd;
        private int aantalPassagiers;

        public int BusNr
        {
            get
            {
                return busNr;
            }
        }

        public int AantalPassagiers
        {
            get
            {
                return aantalPassagiers;
            }
            
        }

        public Lijn RijdOpLijn
        {
            get
            {
                return lijn;
            }

        }

        public DateTime Vertrektijd
        {
            get
            {
                return vertrektijd;
            }
            
        }

        public string BestuurderNaam
        {
            get
            {
                return _voornaam + " " + _achternaam;
                    
            }
            

        }

        public Bus (int busNr, Lijn lijn, DateTime vertrektijd, string voornaam, string achternaam)
        {
                   
            this._achternaam = achternaam;
            this._voornaam = voornaam;

        }

        public void StapIn()
        {
            aantalPassagiers++;
            
        }

        public void StapUit()
        {
            aantalPassagiers--;
        }
    }
public class Lijn
    {
        private int lijnNr;


        public int LijnNr
        {
            get
            {
                return lijnNr ;
            }

        }

        public List<Halte> Haltes
        {
            get;

        }

        public Lijn(int lijnNr)
        {
           
        }

        public void AddHalte(Halte halte)
        {
            Haltes.Add(halte);

        }

        

        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            TimeSpan t = TimeSpan.FromMinutes(0);
            foreach (var h in Haltes)
            {
               
            }

            return t;

        }
        #endregion
    }
public class Halte
    {
        private string naam;
        private TimeSpan reisduur;

        public string Naam
        {
            get
            {
                return naam;
            }

        }

        public TimeSpan Reisduur
        {
            get
            {
                return reisduur;
            }
        }

        public Halte(string naam, TimeSpan reisduur)
        {
            this.naam = naam;
            this.reisduur = reisduur;
            
        }

    }

NakijkTool.TestRapport 	 ---End---------------------

ROBE1503 	 ---Begin---------------------
ROBE1503,Correct,
public class Bus
    {
        int busNr;
        int Aantalpassagiers = 0;
        Lijn rijdoplijn;
        DateTime vertrektijd;
        string Bestuurdernaam;
        string _voornaam;
        string _achternaam;

        public int BusNr { get { return busNr; } }
        public int AantalPassagiers { get { return Aantalpassagiers; } }
        public DateTime Vertrektijd { get { return vertrektijd; } }
        public Lijn RijdOpLijn {  get { return rijdoplijn; } }
        public string BestuurderNaam {  get { return Bestuurdernaam; } }
        public string voornaam {  get { return _voornaam; } }
        public string achternaam {  get { return _achternaam; } }
        

        public Bus(int BusNr, Lijn rijdoplijn, DateTime vertrektijd, string _voornaam, string _achternaam)
        {
            busNr = BusNr;
            this.rijdoplijn = rijdoplijn;
            this.vertrektijd = vertrektijd;
            this._voornaam = _voornaam;
            this._achternaam = _achternaam;
            Bestuurdernaam = _voornaam + " " + _achternaam;
        }

        public void StapIn()
        {
            Aantalpassagiers++;
        }

        public void StapUit()
        {
            if (AantalPassagiers > 0)
            {
                Aantalpassagiers--;
            }
        }
    }
public class Lijn
    {
        int lijnNr;
        List<Halte> haltes = new List<Halte>();
        public List<Halte> Haltes {  get { return haltes; } }
        public int LijnNr { get { return lijnNr; } }

        public Lijn(int lijnNr)
        {
            this.lijnNr = lijnNr;
        }
        public void AddHalte(Halte halte)
        {
            haltes.Add(halte);
        }



        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            TimeSpan totaal = TimeSpan.FromSeconds(0);

            foreach (Halte h in haltes)
            {
                totaal += h.Reisduur;
            }

            return totaal;
        }
        #endregion
    }
public class Halte
    {
        string naam;
        TimeSpan reisduur;

        public string Naam { get { return naam; } }
        public TimeSpan Reisduur {  get { return reisduur; } }

        public Halte(string naam, TimeSpan reisduur)
        {
            this.naam = naam;
            this.reisduur = reisduur;
        }
    }

NakijkTool.TestRapport 	 ---End---------------------

ROSE6277 	 ---Begin---------------------
ROSE6277,Correct,
public class Bus
    {
        public int BusNr;
        public int AantalPassagiers = 0;
        public Lijn RijdOpLijn;
        public DateTime Vertrektijd;
        public string BestuurderNaam;

        public Bus(int busnr, Lijn lijn, DateTime vertrektijd, string vn, string an)
        {
            BusNr = busnr;
            RijdOpLijn = lijn;
            Vertrektijd = vertrektijd;
            BestuurderNaam = vn + " " + an;
        }

        public void StapIn()
        {
            AantalPassagiers++;
        }

        public void StapUit()
        {
            if(AantalPassagiers >= 1) AantalPassagiers--;
        }
    }
public class Lijn
    {
        public int LijnNr;
        public List<Halte> Haltes = new List<Halte>();

        public Lijn(int lijnNr)
        {
            LijnNr = lijnNr;
        }

        public void AddHalte(Halte halte)
        {
            Haltes.Add(halte);
        }


        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            TimeSpan t = TimeSpan.FromSeconds(0);
            foreach (Halte h in Haltes)
            {
                t += h.Reisduur;
            }
            return t;
        }
        #endregion
    }
public class Halte
    {
        public string Naam;
        public TimeSpan Reisduur;

        public Halte(string naam, TimeSpan reisduur)
        {
            Naam = naam;
            Reisduur = reisduur;
        }
    }

NakijkTool.TestRapport 	 ---End---------------------

SHAK5818 	 ---Begin---------------------
SHAK5818,Correct,
public class Bus
    {
        private int busNr;
        private Lijn lijn;
        private DateTime vertrektijd;
        private int aantalPassagiers;

        public int BusNr
        {
            get
            {
                return busNr;
            }
        }

        public int AantalPassagiers
        {
            get
            {
                return aantalPassagiers;
            }
        }

        public Lijn RijdOpLijn
        {
            get
            {
                return lijn;
            }
        }

        public DateTime Vertrektijd
        {
            get
            {
                return vertrektijd;
            }
        }

        public string BestuurderNaam
        {
            get
            {
                return _voornaam + " " + _achternaam;
            }
        }

        private string _voornaam, _achternaam;

        public Bus(int busNr, Lijn lijn, DateTime vertrektijd, string voornaam, string achternaam)
        {
            this.busNr = busNr;
            this.lijn = lijn;
            this.vertrektijd = vertrektijd;
            this._voornaam = voornaam;
            this._achternaam = achternaam;
            aantalPassagiers = 0;
        }

        public void StapIn()
        {
            aantalPassagiers++;
        }

        public void StapUit()
        {
            aantalPassagiers--;
        }
    }
public class Lijn
    {
        private int lijnNr;
        private List<Halte> haltes;

        public int LijnNr
        {
            get
            {
                return lijnNr;
            }
        }

        public List<Halte> Haltes
        {
            get
            {
                return haltes;
            }
        }

        public Lijn(int lijnNr)
        {
            this.lijnNr = lijnNr; 
            haltes = new List<Halte>();
        }

        public void AddHalte(Halte halte)
        {
            Haltes.Add(halte);
        }

        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            TimeSpan totaleReisduur = TimeSpan.FromSeconds(0);

            foreach(Halte halte in Haltes)
            {
                totaleReisduur += halte.Reisduur;
            }

            return totaleReisduur;
        }
        #endregion
    }
public class Halte
    {
        private string naam;
        private TimeSpan reisduur;

        public string Naam
        {
            get
            {
                return naam;
            }
        }
        public TimeSpan Reisduur
        {
            get
            {
                return reisduur;
            }
        }

        public Halte(string naam, TimeSpan reisduur)
        {
            this.naam = naam; 
            this.reisduur = reisduur;
        }

    }

NakijkTool.TestRapport 	 ---End---------------------

SHAN5018 	 ---Begin---------------------
SHAN5018,Correct,
public class Bus
    {
        public int BusNr { get; }
        public int AantalPassagiers { get; set; }
        public Lijn RijdOpLijn { get; }
        public DateTime Vertrektijd { get; }
        public string BestuurderNaam { get; }
        private string voornaam;
        private string achternaam;

        public Bus(int busNr, Lijn lijn, DateTime vertrektijd, string voornaam, string achternaam)
        {
            BusNr = busNr;
            RijdOpLijn = lijn;
            Vertrektijd = vertrektijd;
            this.voornaam = voornaam;
            this.achternaam = achternaam;
            BestuurderNaam = string.Format("{0} {1}", voornaam, achternaam);
        }

        public void StapIn()
        {
            AantalPassagiers++;
        }

        public void StapUit()
        {
            if(AantalPassagiers > 0)
                AantalPassagiers--;
        }
    }
public class Lijn
    {
        public int LijnNr { get; set; }
        public List<Halte> Haltes { get; set; }

        public Lijn(int lijnNr)
        {
            LijnNr = lijnNr;
        }

        public void AddHalte(Halte halte)
        {
            if (Haltes == null)
                Haltes = new List<Halte>();

            Haltes.Add(halte);
        }

        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            TimeSpan T = TimeSpan.FromSeconds(0);
            foreach(Halte h in Haltes)
            {
                T += h.Reisduur;
            }
            return T;
        }
        #endregion
    }
public class Halte
    {
        public string Naam { get; set; }
        public TimeSpan Reisduur { get; set; }

        public Halte(string naam, TimeSpan reisduur)
        {
            Naam = naam;
            Reisduur = reisduur;
        }
    }

NakijkTool.TestRapport 	 ---End---------------------

SHAR7380 	 ---Begin---------------------
Compiler Errors:
(292,39): error CS1001: Identifier expected
(301,39): error CS1001: Identifier expected
##################

SHAR7380,CompileError,

NakijkTool.TestRapport 	 ---End---------------------

SHAV3610 	 ---Begin---------------------
SHAV3610,Correct,
public class Bus
    {
        public int BusNr { get; }
        public int AantalPassagiers { get; set; }
        public Lijn RijdOpLijn { get; }
        public DateTime Vertrektijd { get; }
        public string BestuurderNaam { get; }
        private string Voornaam = null;
        private string Achternaam = null;

        public Bus(int busnr, Lijn lijn, DateTime vertrektijd, string voornaam, string achternaam)
        {
            BusNr = busnr;
            RijdOpLijn = lijn;
            Vertrektijd = vertrektijd;
            Voornaam = voornaam;
            Achternaam = achternaam;
            BestuurderNaam = voornaam + " " + achternaam;
        }

        public void StapIn()
        {
            AantalPassagiers++;
        }

        public void StapUit()
        {
            AantalPassagiers--;
        }
    }
public class Lijn
    {
        public int LijnNr { get; set; }
        public List<Halte> Haltes = new List<Halte>();

        public Lijn(int lijnNr)
        {
            LijnNr = lijnNr;
        }

        public void AddHalte(Halte halte)
        {
            Haltes.Add(halte);
        }


        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            TimeSpan reistijd = TimeSpan.FromSeconds(0);
            foreach (Halte halte in Haltes)
            {
                reistijd = reistijd + halte.Reisduur;
            }

            return reistijd;
        }

        #endregion
    }
public class Halte
    {
        public string Naam { get; }
        public TimeSpan Reisduur { get; }

        public Halte(string naam, TimeSpan reisduur)
        {
            Naam = naam;
            Reisduur = reisduur;
        }
    }

NakijkTool.TestRapport 	 ---End---------------------

SHEB3960 	 ---Begin---------------------
SHEB3960,Correct,
public class Bus
    {
        int busnr;
        int aantalpassagiers;
        Lijn rijdoplijn;
        DateTime vertrektijd;
        string bestuurdernaam;
        private string _voornaam;
        private string _achternaam;

        public int BusNr
        {
            get { return this.busnr; }
            set { this.busnr = value; }
        }

        public int AantalPassagiers
        {
            get { return this.aantalpassagiers; }
            set { this.aantalpassagiers = value; }
        }

        public Lijn RijdOpLijn
        {
            get { return this.rijdoplijn; }
            set { this.rijdoplijn = value; }
        }

        public DateTime Vertrektijd
        {
            get { return this.vertrektijd; }
            set { this.vertrektijd = value; }
        }

        public string BestuurderNaam
        {
            get { return _voornaam + " " + _achternaam; }
            set { bestuurdernaam = value; }
        }

        public Bus(int busNr, Lijn lijn, DateTime vertrektijd, string voornaam, string achternaam)
        {
            this.busnr = busNr;
            this.RijdOpLijn = lijn;
            this.vertrektijd = vertrektijd;
            this._voornaam = voornaam;
            this._achternaam = achternaam;
        }

        public void StapIn()
        {
            aantalpassagiers++;
        }

        public void StapUit()
        {
            aantalpassagiers--;
        }
    }
public class Lijn
    {
        int lijnnr;
        List<Halte> haltes = new List<Halte>();

        public int LijnNr
        {
            get { return this.lijnnr; }
            set { this.lijnnr = value; }
        }

        public List<Halte> Haltes
        {
            get { return this.haltes; }
            set { this.haltes = value; }
        }

        public Lijn(int lijnNr)
        {
            this.LijnNr = lijnNr;
        }

        public void AddHalte(Halte halte)
        {
            haltes.Add(halte);
        }

        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            TimeSpan t = TimeSpan.FromMinutes(0);
            for (int i = 0; i < haltes.Count; i++)
            {
                t += haltes[i].Reisduur;
            }
            return t;
        }
        #endregion
    }
public class Halte
    {
        string naam = string.Empty;
        TimeSpan reisduur;

        public string Naam
        {
            get { return this.naam; }
            set { this.naam = value; }
        }

        public TimeSpan Reisduur
        {
            get { return this.reisduur; }
            set { this.reisduur = value; }
        }

        public Halte(string naam, TimeSpan reisduur)
        {
            this.Naam = naam;
            this.Reisduur = reisduur;
        }
    }

NakijkTool.TestRapport 	 ---End---------------------

SHER8777 	 ---Begin---------------------
SHER8777,ExceptionDuringExecution,
Runtime exception: NUnit.Framework.AssertionException:   Expected: 00:12:00
  But was:  00:00:00

   at NUnit.Framework.Assert.That[TActual](TActual actual, IResolveConstraint expression, String message, Object[] args)
   at NUnit.Framework.Assert.AreEqual(Object expected, Object actual)
   at Tentamens.QuestionAndTest.TestVraag3() Exception has been thrown by the target of an invocation.
public class Bus
    {
        public int BusNr
        {
            get;
        }  

        public int AantalPassagiers
        {
            get;
        }

        public Lijn RijdOpLijn
        {
            get;
        }

        public DateTime Vertrektijd
        {
            get;
        }

        public string BestuurderNaam
        {
            get;
        }

        private string _voornaam;
        private string _achternaam;

        public Bus(int BusNr, Lijn lijn, DateTime Vertrektijd, string _voornaam, string _achternaam)
        {
            this.BusNr = BusNr;
            this.RijdOpLijn = lijn;
            this.Vertrektijd = Vertrektijd;
            this._voornaam = _voornaam;
            this._achternaam = _achternaam;
        }

        public void StapIn()
        {
            
        }

        public void StapUit()
        {
            
        }
    }
public class Lijn
    {

        public int LijnNr
        {
            get;
        }

        public List<Halte> Haltes
        {
            get;
        }

        public Lijn(int LijnNr)
        {
            this.LijnNr = LijnNr;
        }

        public void AddHalte(Halte halte)
        {
            
        }


        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            TimeSpan t = TimeSpan.FromSeconds(0);
            return t;
        }
        #endregion
    }
public class Halte
    {

        public string Naam
        {
            get; set;
        }

        public TimeSpan Reisduur
        {
            get; set;
        }

        public Halte(string naam, TimeSpan Reisduur)
        {
            this.Naam = naam;
            this.Reisduur = Reisduur;
        }

    }

NakijkTool.TestRapport 	 ---End---------------------

SONN5711 	 ---Begin---------------------
Compiler Errors:
(88,40): error CS1525: Invalid expression term ')'
##################

SONN5711,CompileError,

NakijkTool.TestRapport 	 ---End---------------------

TANN5293 	 ---Begin---------------------
Compiler Errors:
(376,36): error CS1001: Identifier expected
(376,36): error CS1515: 'in' expected
(376,36): error CS1525: Invalid expression term ')'
##################

TANN5293,CompileError,

NakijkTool.TestRapport 	 ---End---------------------

TARA9905 	 ---Begin---------------------
TARA9905,Correct,
public class Bus
    {
        private string   _voornaam;
        private string   _achternaam;
        private int      busNr;
        private Lijn     lijn;
        private DateTime vertrektijd;
        private int aantalPassagiers;

        public int BusNr { get { return busNr; } }
        public int AantalPassagiers { get { return aantalPassagiers; } }
        public Lijn RijdOpLijn { get { return lijn; } }
        public DateTime Vertrektijd { get { return vertrektijd; } }
        public string BestuurderNaam { get { return (_voornaam + " " + _achternaam); } } 

        public Bus(int busNr, Lijn lijn, DateTime vertrektijd, string voornaam, string achternaam)
        {
            this.busNr = busNr;
            this.lijn = lijn;
            this.vertrektijd = vertrektijd;
            _voornaam = voornaam;
            _achternaam = achternaam;
        }

        public void StapIn()
        {
            aantalPassagiers = aantalPassagiers + 1;
        }

        public void StapUit()
        {
            aantalPassagiers = aantalPassagiers - 1;
        }
    }
public class Lijn
    {
        private int lijnNr;
        private List<Halte> haltes;

        public int LijnNr { get { return lijnNr; } }
        public List<Halte> Haltes { get { return haltes; } }

        public Lijn(int lijnNr)
        {
            this.lijnNr = lijnNr;
            haltes = new List<Halte>();
        }

        public void AddHalte(Halte halte)
        {
            haltes.Add(halte);
        }
        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            TimeSpan totaal = TimeSpan.FromSeconds(0);
            foreach (Halte halte in haltes)
            {
                totaal = totaal + halte.Reisduur;
            }
            return totaal;
        }
        #endregion
    }
public class Halte
    {
        private string naam;
        private TimeSpan reisduur;

        public string Naam { get { return naam; } }
        public TimeSpan Reisduur { get { return reisduur; } }

        public Halte(string naam, TimeSpan reisduur)
        {
            this.naam     = naam;
            this.reisduur = reisduur;
        }
    }

NakijkTool.TestRapport 	 ---End---------------------

VALO3181 	 ---Begin---------------------
Compiler Errors:
(105,24): error CS0117: 'QuestionAndTest.Halte' does not contain a definition for 'reisduur'
##################

VALO3181,CompileError,
public class Bus
    {
        private string voornaam;
        private string achternaam;
        public int Busnr
        {
            get;
            set;
        }
        public int AantalPassagiers
        {
            get;
            set;
        }
        public Lijn Rijdoplijn
        {
            get;
            set;
        }
        public DateTime Vertrektijd
        {
            get;
            set;
        }
        public string BestuurderNaam
        {
            get;
            set;
        }

        public Bus (int busnr,Lijn lijn, DateTime vertrektijd, string voornaam,string achternaam)
        {
            this.Busnr = busnr;
            this.Rijdoplijn = lijn;
            this.Vertrektijd = vertrektijd;
            this.voornaam = voornaam;
            this.achternaam = achternaam;
        }
        public void StapIn()
        {

        }
        public void StapUit()
        {

        }
    }
public class Lijn
    {
        public int Lijnnr
        {
            get;
            set;
        }
        public List<Halte> Haltes
        {
            get;
            set;
          
        }
        public void AddHalte(Halte halte)
        {
            //Haltes.Add(halte);
            //List initialiseren om haltes op te slaan
        }
        public Lijn(int lijnnr)
        {
            this.Lijnnr = lijnnr;
        }
        public TimeSpan ReisTijd()
        {
            
            TimeSpan t = TimeSpan.FromSeconds(0);
            t += Halte.reisduur;
            return t;

        }

        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            throw new NotImplementedException();
        }
        #endregion
    }
public class Halte
    {
        public string Naam
        {
            get;
            set;
        }
        public TimeSpan Reisduur
        {
            get;
            set;
        }
        public Halte (string naam, TimeSpan reisduur)
        {
            this.Naam = naam;
            this.Reisduur = reisduur;
        }
       
    }

NakijkTool.TestRapport 	 ---End---------------------

VAND2394 	 ---Begin---------------------
VAND2394,Correct,
public class Bus
    {
        private string _voornaam;
        private string _achternaam;
        public int BusNr { get; set; }
        public int AantalPassagiers { get; set; }
        public Lijn RijdOpLijn { get; set; }
        public DateTime Vertrektijd { get; set; }
        public string BestuurderNaam { get; set; }

        public Bus(int busNr, Lijn lijn, DateTime vertrektijd, string voornaam, string achternaam)
        {
            this.BusNr = busNr;
            this.RijdOpLijn = lijn;
            this.Vertrektijd = vertrektijd;
            this._voornaam = voornaam;
            this._achternaam = achternaam;
            this.BestuurderNaam = _voornaam + " " + _achternaam;
        }

        public void StapIn()
        {
            AantalPassagiers = AantalPassagiers + 1;
        }

        public void StapUit()
        {
            AantalPassagiers = AantalPassagiers - 1;
        }
    }
public class Lijn
    {
        public int LijnNr { get; set; }
        public List<Halte> Haltes = new List<Halte>();

        public Lijn(int lijnNr)
        {
            this.LijnNr = lijnNr;
        }

        public void AddHalte(Halte halte)
        {
            this.Haltes.Add(halte);
        }

        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            TimeSpan reistijd = TimeSpan.Zero;
            foreach (Halte halte in Haltes)
            {
                reistijd = reistijd + halte.Reisduur;
            }
            return reistijd;
        }
        #endregion
    }
public class Halte
    {
        public string Naam { get; }
        public TimeSpan Reisduur { get; }

        public Halte(string naam, TimeSpan reisduur)
        {
            this.Naam = naam;
            this.Reisduur = reisduur;
        }

    }

NakijkTool.TestRapport 	 ---End---------------------

VEDA8631 	 ---Begin---------------------
Compiler Errors:
(99,25): error CS0102: The type 'QuestionAndTest.Lijn' already contains a definition for 'Reistijd'
(16,29): error CS7036: There is no argument given that corresponds to the required formal parameter 'Haltes' of 'QuestionAndTest.Lijn.Lijn(int, string)'
(17,27): error CS7036: There is no argument given that corresponds to the required formal parameter 'Achternaam' of 'QuestionAndTest.Bus.Bus(int, QuestionAndTest.Lijn, DateTime, string, string, string)'
(19,18): error CS1955: Non-invocable member 'QuestionAndTest.Lijn.AddHalte' cannot be used like a method.
(20,18): error CS1955: Non-invocable member 'QuestionAndTest.Lijn.AddHalte' cannot be used like a method.
(21,18): error CS1955: Non-invocable member 'QuestionAndTest.Lijn.AddHalte' cannot be used like a method.
(22,18): error CS1955: Non-invocable member 'QuestionAndTest.Lijn.AddHalte' cannot be used like a method.
(23,18): error CS1955: Non-invocable member 'QuestionAndTest.Lijn.AddHalte' cannot be used like a method.
(24,18): error CS1955: Non-invocable member 'QuestionAndTest.Lijn.AddHalte' cannot be used like a method.
##################

VEDA8631,CompileError,
public class Bus
    {
        public int _BusNr { get; set; }
        public int AantalPassagiers { get; set; }
        public Lijn _RijdopLijn { get; set; }
        public DateTime _Vertrektijd { get; set; }
        public string _BestuurderNaam { get; set; }
        public string _Voornaam { get; set; }
        public string _Achternaam { get; set; }

        
        

        public Bus (int BusNr, Lijn lijn, DateTime Vertrektijd,string Bestuurdernaam,string Voornaam, string Achternaam)
        {
            _BusNr = BusNr;
            _RijdopLijn = lijn;
            _Vertrektijd = Vertrektijd;
            _BestuurderNaam = Bestuurdernaam;
            _Voornaam = Voornaam;
            _Achternaam = Achternaam;
        }
        

      
     

        


    }
public class Lijn
    {
        int _lijnNr { get; set; }
        TimeSpan Reistijd { get; set; }
        List<string> _Halte = new List<string>();
        


        public Lijn (int lijnNr, string Haltes)
        {
            _lijnNr = lijnNr;
           
           
        }

        public class AddHalte
        {
            string _Haltes { get; set; }
            public AddHalte(string Haltes )
            {
                _Haltes = Haltes;
            }

            
        }

       
        
        

        
       
        

        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            throw new NotImplementedException();
        }
        #endregion
       

       
        
        
    }
public class Halte
    {
        public string _Naam;
        public TimeSpan _Reisduur { get; set; }
        
        
        

        public Halte(string Naam, TimeSpan Reisduur)
        {
            _Naam = Naam;
            _Reisduur = Reisduur;
            TimeSpan H = TimeSpan.FromSeconds(0);

        }
        
        

    
    }

NakijkTool.TestRapport 	 ---End---------------------

WILT2547 	 ---Begin---------------------
WILT2547,Correct,
public class Bus
    {
        public int BusNr { get; set; }
        public int AantalPassagiers { get; set; }
        public Lijn RijdOpLijn { get; set; }
        public DateTime VertrekTijd { get; set; }
        public string BestuurderNaam { get; set; }

        private string _voornaam;
        private string _achternaam;

        public Bus(int busNr, Lijn lijn, DateTime vertrektijd, string voornaam, string achternaam)
        {
            this.AantalPassagiers = 0;
            this.BusNr = busNr;
            this.RijdOpLijn = lijn;
            this.VertrekTijd = vertrektijd;
            this._voornaam = voornaam;
            this._achternaam = achternaam;
            this.BestuurderNaam = voornaam + " " + achternaam;
        }
        
        public void StapIn()
        {
            AantalPassagiers++;
        }

        public void StapUit()
        {
            AantalPassagiers--;
        }
    }
public class Lijn
    {
        public int LijnNr { get; set; }
        public List<Halte> Haltes = new List<Halte>();

        private int lijn;
        
        public Lijn(int lijnNr)
        {
            this.LijnNr = lijnNr;
        }

        public void AddHalte(Halte halte)
        {
            Haltes.Add(halte);
        }

        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            TimeSpan total = TimeSpan.Zero;
            foreach (Halte h in Haltes)
            {
                total = total + h.Reisduur;
            }
            return total;
        }
    #endregion
}
public class Halte
    {
        public string Naam { get; set; }
        public TimeSpan Reisduur { get; set; }

        public Halte(string naam, TimeSpan reisduur)
        {
            this.Naam = naam;
            this.Reisduur = reisduur;
        }
    }

NakijkTool.TestRapport 	 ---End---------------------

YAHA2309 	 ---Begin---------------------
YAHA2309,Correct,
public class Bus
    {
        private string _voornaam;
        private string _achternaam;

        public int BusNr { get; set; }
        public int AantalPassagiers { get; private set; }
        public Lijn RijdOpLijn { get; set; }
        public DateTime Vertrektijd { get; set; }
        public string BestuurderNaam
        {
            get
            {
                return $"{_voornaam} {_achternaam}";
            }
        }

        public Bus(int busNr, Lijn lijn, DateTime vertrektijd, string voornaam, string achternaam)
        {
            this.BusNr = busNr;
            this.RijdOpLijn = lijn;
            this.Vertrektijd = vertrektijd;
            this._voornaam = voornaam;
            this._achternaam = achternaam;
        }

        public void StapIn()
        {
            AantalPassagiers++;
        }

        public void StapUit()
        {
            if (AantalPassagiers > 0)
                AantalPassagiers--;
        }
    }
public class Lijn
    {
        public int LijnNr { get; set; }
        public List<Halte> Haltes { get; private set; }

        public Lijn(int lijnNr)
        {
            this.LijnNr = lijnNr;
            this.Haltes = new List<Halte>();
        }

        public void AddHalte(Halte halte)
        {
            Haltes.Add(halte);
        }

        //Vraag 3 Hier invullen!
        #region Vraag3
        public TimeSpan Reistijd()
        {
            TimeSpan duur = new TimeSpan();
            foreach (Halte halte in Haltes)
            {
                duur += halte.Reisduur;
            }

            return duur;
        }
        #endregion
    }
public class Halte
    {
        public string Naam { get; }
        public TimeSpan Reisduur { get; set; }

        public Halte(string naam, TimeSpan reisduur)
        {
            this.Naam = naam;
            this.Reisduur = reisduur;
        }
    }

NakijkTool.TestRapport 	 ---End---------------------

